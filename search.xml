<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于本站</title>
    <url>/2020/08/09/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99/</url>
    <content><![CDATA[<h1 id="关于本站"><a href="#关于本站" class="headerlink" title="关于本站"></a>关于本站</h1><p>​    做自己的博客的想法也有很长时间了，最早在csdn上写自己的想法，自己所学到的知识等，但我发现，我写博客的目的是给自己看的，而不是展示出来，网上编程方向的资料有很多，我写的既不是最好的，也不是最全面的，甚至还有不少知识上的错误，所以决定做自己的博客。</p>
<p>​    可能这个想法最早还在一个月前，我最初的想法是用springboot+vue做，vue卡住了我，又想到了thymeleaf，发现css/js等前端知识的欠缺使想法很难进行下去，直接pass。</p>
<p>​    Gridea的出现使我认识到，前人栽树，后人乘凉，直接用模板，将现有的内容套用即可。我看了网上的部分模板及成品，认为并不是我理想的博客，但他的好处是提供图形化界面，一键导入内容，一键更换主题等。同时我还在找其他类似的模板，直到Hexo框架的出现。</p>
<img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200809175938220.png" style="zoom: 50%;" />

<p>  在某群划水时，某大佬展示了他所做的博客<code>https://mofan212.gitee.io/</code>，我发现这才是我想要的，通过短暂的交流，发现Hexo简直是面向cv编程，在编程经验不足的情况下的最好选择。</p>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>​    通过B站程序羊的手把手教学，Hexo本地化已经完成。</p>
<img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200809180709237.png" style="zoom:67%;" />

<p>​    在对比了Next/yilia/butterfly等主流主题后，Next过于简洁，yilia和butterfly的内容更加丰富，网上的教程也更多，我感觉butterfly才最符合中国人/理科男/码农的审美，最终确定了以Hexo+butterfly为模板的博客创作之路。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200809181104996.png" style="zoom:67%;" />

<p>​    具体的实现功能也就是这几个了，由于留言板需要引入插件及登录等繁琐事情暂时没有实现。</p>
<p>​    其中也有很多问题，最大的问题就是没有及时备份，在某一次修改配置文件时，编译时报了错误，而且错误报告也模糊不清，最终只能重新编写配置文件。</p>
<p>​    文章中图片的插入也是一个问题，最初想的是直接放在本地，然后文章中引用本地地址，发现这样也麻烦，当文章多了以后，图片也杂乱无章。最终分析利弊用了阿里云oss云存储，在Typora+PicGo+阿里云oss的无缝衔接下，图片问题也得到了很好的解决。</p>
<p>​    最终的设计结果也就是现在看到了，小毛病也有很多，最初选择了白底大图当封面，右上角的导航键以及中间的大字都是白色，效果非常不好，但改掉导航键也不是什么好想法，我发现使用深色模式下的效果最好，果断选择深色模式为默认背景模式。</p>
<p>​    音乐也是可以实现的，但是项目部署在了github上，可能加载需要一段时间，稍候即可。音乐默认播放我的网易云歌单，我在手机上可以进行歌曲的选择。</p>
<p>​    文章都是我以前写好的，所以很容易迁移到了我的博客上。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>​    由于我的腾讯云还有不到二十天，打算腾讯云到期后使用阿里云作为服务器，但域名备案等繁琐的项目使我决定一直部署在github上，以后可能会迁移到gitee上。这个项目也会停止更新了，应该只会更新一些我写的文章了。</p>
<h3 id="做的不好，审美欠缺，多多指教。"><a href="#做的不好，审美欠缺，多多指教。" class="headerlink" title="做的不好，审美欠缺，多多指教。"></a>做的不好，审美欠缺，多多指教。</h3>]]></content>
  </entry>
  <entry>
    <title>ArrayList</title>
    <url>/2021/04/13/ArrayList%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="ArrayList中的线程安全与多线程问题"><a href="#ArrayList中的线程安全与多线程问题" class="headerlink" title="ArrayList中的线程安全与多线程问题"></a>ArrayList中的线程安全与多线程问题</h1><h2 id="ArrayList源码"><a href="#ArrayList源码" class="headerlink" title="ArrayList源码"></a>ArrayList源码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    在ArrayList的源码中，是先给底层的数组长度加一，然后把要加入的值加到数组的相应位置中。线程不安全的原因就在于此。此方法没有加synchronized，保证的运行时的效率，但也导致了此方法的并发性下降。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol>
<li>Vector</li>
<li>Collections集合工具类</li>
<li>CopyOnWriteArrayList</li>
</ol>
<h2 id="Vector源码"><a href="#Vector源码" class="headerlink" title="Vector源码"></a>Vector源码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">    elementData[elementCount++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    显而易见，直接在方法头上加了synchronized，通过加锁的方法解决线程安全问题。这就导致了线程的效率过低。</p>
<h2 id="Collections-synchronizedList"><a href="#Collections-synchronizedList" class="headerlink" title="Collections.synchronizedList()"></a>Collections.synchronizedList()</h2><img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20210413001138652.png" alt="image-20210413001138652" style="zoom:67%;" />    

<p>​    Collections中的方法解决了这个问题，在源码中,    <code>final Object mutex;     // Object on which to synchronize</code> 直接把add()，size(),remove()等方法加上了sync锁，保证了线程的安全性。</p>
<p>​    Collections下还有synchronizedMap、synchronizedSet等方法，说明Map、Set方法也都是非线程安全的。</p>
<h2 id="CopyOnWriteArrayList源码"><a href="#CopyOnWriteArrayList源码" class="headerlink" title="CopyOnWriteArrayList源码"></a>CopyOnWriteArrayList源码</h2><p>​    CopyOnWriteArrayList源于JUC包中，专门针对ArrayList的线程安全问题做出了调整。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        <span class="keyword">int</span> len = elements.length;</span><br><span class="line">        Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">        newElements[len] = e;</span><br><span class="line">        setArray(newElements);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述三种的底层思想都是一样的，即底层数组长度加一，然后把add的值塞到新加的位置上去。但CopyOnWriteArrayList采用了可重入锁的方式，当添加时，先复制一份数组，在新数组上做修改，然后再把引用指向新数组；当删除的是最后一个元素时，直接将n-1个长度的数组复制到新数组，然后引用指向新数组，当删除其他元素时，将除了删除元素的其他元素赋值到新数组，再将引用指向新数组。查询方法没有加锁，保证了高效性。</p>
<h1 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JUCTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ReentrantLock reentrantLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">        String s = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">        <span class="keyword">long</span> l = System.currentTimeMillis();</span><br><span class="line">        List&lt;String&gt; testList = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                    testList.add(s);</span><br><span class="line">                    System.out.println(testList);</span><br><span class="line">                &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        <span class="keyword">long</span> l1 = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>+ (l1-l));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 保证一致性引发的问题/详解布隆过滤器</title>
    <url>/2021/03/14/Redis%E4%BF%9D%E8%AF%81%E4%B8%80%E8%87%B4%E6%80%A7+%E8%AF%A6%E8%A7%A3%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    <content><![CDATA[<h1 id="Redis-保证一致性引发的问题-详解布隆过滤器"><a href="#Redis-保证一致性引发的问题-详解布隆过滤器" class="headerlink" title="Redis 保证一致性引发的问题/详解布隆过滤器"></a>Redis 保证一致性引发的问题/详解布隆过滤器</h1><blockquote>
<p>背景:当某项目使用Redis做缓存时，如何保证Redis与数据库中数据的一致性。</p>
</blockquote>
<h3 id="Q：如何保证Redis的一致性"><a href="#Q：如何保证Redis的一致性" class="headerlink" title="Q：如何保证Redis的一致性"></a>Q：如何保证Redis的一致性</h3><h5 id="1-当用户只做查询操作时："><a href="#1-当用户只做查询操作时：" class="headerlink" title="1.当用户只做查询操作时："></a>1.当用户只做查询操作时：</h5><p>​    先向缓存中请求此数据，若此数据存在，直接返回缓存中的内容；若此数据不存在于缓存中，向数据库中发出查询请求，将结果返回并将此次的查询结果保存到数据库中。因为查询操作为幂等性操作，不需要考虑多次请求的情况。但此时需要考虑缓存穿透问题，即查询数据库中也不存在的数据。此时又有两种解决办法：</p>
<p><strong>缓存空对象（如果数据库中也查询不到，直接返回key(id)-value(null)）</strong>或者<strong>使用布隆过滤器</strong> 。</p>
<h5 id="2-当大量用户查询同一条数据时（热点事件的解决）："><a href="#2-当大量用户查询同一条数据时（热点事件的解决）：" class="headerlink" title="2.当大量用户查询同一条数据时（热点事件的解决）："></a>2.当大量用户查询同一条数据时（热点事件的解决）：</h5><p>​    首先考虑缓存击穿问题，当布隆过滤器放过这些请求后，这些请求直接请求数据库，造成数据库宕机。</p>
<p>​    解决办法：加分布式锁，使这些查询请求只有一个请求能够访问数据库，其他请求处于阻塞状态。当第一个请求查询到结果后，同时会将结果放入缓存中。当其他请求开始时，就会发现缓存中有数据，无需访问数据库，解决了缓存击穿的问题。</p>
<h5 id="3-更新数据库及redis缓存："><a href="#3-更新数据库及redis缓存：" class="headerlink" title="3.更新数据库及redis缓存："></a>3.更新数据库及redis缓存：</h5><p>​    延迟双删：</p>
<blockquote>
<img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20210314003006554.png" alt="image-20210314003006554" style="zoom: 80%;" />
</blockquote>
<h3 id="Q：缓存空对象会存在的问题"><a href="#Q：缓存空对象会存在的问题" class="headerlink" title="Q：缓存空对象会存在的问题"></a>Q：缓存空对象会存在的问题</h3><p>​    1.当用户只查询固定内容的数据时，效果很好，缓存在未过期的情况下为数据库抵挡了所有请求。</p>
<p>​    2.当用户做随机查询时，例如where id = Random Num （垃圾请求），此时会在Redis中加入大量的Null，占用Redis有限的内存。</p>
<h3 id="Q：布隆过滤器"><a href="#Q：布隆过滤器" class="headerlink" title="Q：布隆过滤器"></a>Q：布隆过滤器</h3><h5 id="1-布隆过滤器"><a href="#1-布隆过滤器" class="headerlink" title="1.布隆过滤器"></a>1.布隆过滤器</h5><blockquote>
<p>BloomFilter<Integer> myBloomFilter = BloomFilter.create(Funnels.integerFunnel(),1000000,0.01);</p>
<img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20210313202956429.png" alt="image-20210313202956429"  />

<img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20210313203302778.png" alt="image-20210313203302778"  />

<img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20210313205547076.png" alt="image-20210313205547076"  />
</blockquote>
<p><strong>源码分析：</strong></p>
<p>创建布隆过滤器需要分别传入布隆过滤器所要接受的类型、预计存入数据的数量、误判率。</p>
<p>布隆过滤器的底层是一个bit数组，将<strong>预计存入数据的数量</strong>和<strong>误判率</strong>带入图2的计算公式可得到这个bit数组的大小（optimalNumOfBits）。</p>
<p>通过图3计算出所需的hash函数的个数。理论上，<strong>预计存入数据的数量</strong>越多，<strong>误判率</strong>约趋近于0，bit数组的长度越大，需要生成的hash算法也就越多，每一条数据被hash的次数也就越多，最终的结果也就越精确。</p>
<p><strong>举例说明：</strong></p>
<blockquote>
<p>演示地址 <a href="https://www.jasondavies.com/bloomfilter/?spm=a2c4e.11153940.blogcont683602.11.21181fe6hVAGjH">https://www.jasondavies.com/bloomfilter/?spm=a2c4e.11153940.blogcont683602.11.21181fe6hVAGjH</a></p>
</blockquote>
<p>当我设置预计存入的数量为 10，误判率为0.1时，假设根据上述公式计算，初始化的bitArray长度为8，需要hash的次数为2（不是对key哈希两次，而是生成了两种hash算法）。当我要存入的key为 <code>woongcha</code>时， 第一次hash取模得到的结果为3，第二次hash取模的结果为5。此时这个bit数组的第三位和第五位就会由0变为1；再次存入<code>student</code> ，两次hash取模结果分别为3和4，此时这个bit数组的第三位和第四位就会由0变为1（原本为1，则不变）。此时我要判断 <code>beautiful</code>是不是在缓存中，通过布隆过滤器算出的两次hash取模结果分别为5和7，但bit数组中的第七位为0，所以teacher一定不在缓存中，此次请求会发往数据库。 </p>
<p><strong>图解说明：</strong></p>
<blockquote>
<img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20210313222553765.png" alt="image-20210313222553765"  />

<p>图中的黄格子代表此位上为1，白格子代表0。</p>
<img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20210313222828811.png" alt="image-20210313222828811"  />
</blockquote>
<p>有hash计算的地方就会有hash冲突的地方，所以这也是布隆过滤器的误差所在。例如：</p>
<blockquote>
<img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20210313223142813.png" alt="image-20210313223142813"  />
</blockquote>
<p>当我在缓存中添加<code>woongcha1-woongcha10</code> 十个key时，代表这些数据在缓存中已经存在，无需请求数据库。此时发来了对<code>beautiful5</code> 的请求，<code>beautiful5</code>经过三次hash取模后所得到的值恰好在bitArray里都为1，布隆过滤器就会认为这个值也在缓存中，但实际上是不在的。这就是为什么会有mightContain()方法的存在，在名称上就直白的说明了是可能存在，而不是一定存在。这也说明了为什么布隆过滤器没有get和delete方法，因为存进去的值没有直接保存，而是保存了hash计算之后的结果。</p>
<h5 id="2-布隆过滤器存在的问题"><a href="#2-布隆过滤器存在的问题" class="headerlink" title="2.布隆过滤器存在的问题"></a>2.布隆过滤器存在的问题</h5><p>​    <strong>脏数据问题</strong></p>
<p>当某个查询使用布隆过滤器以后，当向数据库中插入/删除/更新数据时，布隆过滤器中的数据也必须跟着改变，否则就会出现某条存在于数据库中的数据直接被布隆过滤器拦截。造成查询错误。</p>
<p>解决办法为定时更新布隆过滤器上的数据，数据越重要、数据库中的更新操作越多，布隆过滤器的更新间隔就应该越小。</p>
<p>​    <strong>谷歌布隆过滤器问题</strong></p>
<p>通过源码可知，谷歌所提供的布隆过滤器所新建的bitArray存在于JVM内存中，当服务器异常时，会因为内存的消失，布隆过滤器也会失效。而且在Java中bitArray的最大长度为2<sup>^32</sup>-1 = <strong>2147483647</strong>,bitArrays长度的限制必然导致精度的缺失。</p>
<p>解决办法为用Redis手写实现布隆过滤器，redis有RDB和AOF的方式使数据持久化，使布隆过滤器长期有效且可以恢复，防止服务器出现的问题。利用redis的底层优势（redis储存数据也是由bitArrays存储的，且最大长度为512M≈42亿）新建bitArrays数组,此时的布隆过滤器就会更加准确。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>合并有序链表</title>
    <url>/2020/09/02/%E5%90%88%E5%B9%B6%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="合并有序链表"><a href="#合并有序链表" class="headerlink" title="合并有序链表"></a>合并有序链表</h1><p><img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200902192603130.png" alt="image-20200902192603130"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> data;    </span><br><span class="line">    <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myList</span></span>&#123;</span><br><span class="line">    <span class="comment">//当某个链表为空时，直接返回另一个链表。</span></span><br><span class="line">    <span class="comment">//当两个链表都为空时，返回空。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">mergeTwoList</span><span class="params">(Node node1,Node node2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node1 == <span class="keyword">null</span> &amp;&amp; node2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node1 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> node2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> node1;</span><br><span class="line">        &#125;</span><br><span class="line">        Node node = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//把较小值放在头节点。继续遍历。    </span></span><br><span class="line">        <span class="keyword">if</span> (node1.data&gt;node2.data)&#123;</span><br><span class="line">            node = node2;</span><br><span class="line">            node.next = mergeTwoList(node1,node2.next);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            node = node1;</span><br><span class="line">            node.next = mergeTwoList(node1.next,node2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Node node1 = <span class="keyword">new</span> Node(<span class="number">1</span>);</span><br><span class="line">        Node node2 = <span class="keyword">new</span> Node(<span class="number">2</span>);</span><br><span class="line">        Node node6 = <span class="keyword">new</span> Node(<span class="number">6</span>);</span><br><span class="line">        Node node7 = <span class="keyword">new</span> Node(<span class="number">7</span>);</span><br><span class="line">        Node node8 = <span class="keyword">new</span> Node(<span class="number">8</span>);</span><br><span class="line">        Node node9 = <span class="keyword">new</span> Node(<span class="number">9</span>);</span><br><span class="line">        <span class="comment">//实现如图示链接。</span></span><br><span class="line">        node1.next = node2;</span><br><span class="line">        node2.next = node9;</span><br><span class="line">        node6.next = node7;</span><br><span class="line">        node7.next = node8;</span><br><span class="line">        Node node = mergeTwoList(node1, node6);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(node.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>软通动力面试总结</title>
    <url>/2020/09/01/%E8%BD%AF%E9%80%9A%E5%8A%A8%E5%8A%9B%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="软通动力面试总结"><a href="#软通动力面试总结" class="headerlink" title="软通动力面试总结"></a>软通动力面试总结</h1><h3 id="Spring常用注解"><a href="#Spring常用注解" class="headerlink" title="Spring常用注解"></a>Spring常用注解</h3><p>Bean Component Configuration Autowired Resource</p>
<h3 id="内连接和左连接不同"><a href="#内连接和左连接不同" class="headerlink" title="内连接和左连接不同"></a>内连接和左连接不同</h3><p>左连接：左边有的，右边没有的为null</p>
<p>右连接：左边没有的，右边有的为null</p>
<p>内连接：显示左边右边共有的</p>
<h3 id="你使用过的最复杂的SQL"><a href="#你使用过的最复杂的SQL" class="headerlink" title="你使用过的最复杂的SQL"></a>你使用过的最复杂的SQL</h3><p><strong>查询没有学全所有课的同学的学号、姓名；</strong></p>
<p>select Student.S#,Student.Sname<br>from Student,SC<br>where Student.S#=SC.S# group by Student.S#,Student.Sname having count(C#) &lt;(select count(C#) from Course);</p>
<h3 id="HashMap为什么用红黑树"><a href="#HashMap为什么用红黑树" class="headerlink" title="HashMap为什么用红黑树"></a>HashMap为什么用红黑树</h3><p>红黑树也是一种二叉查找树。当于是平衡二叉树，它是一种经典高效的算法，二叉树的特点是，左节点小于等于根节点，右节点大于等于根节点。随着数据越来越多，左节点就会越来越长，二叉树的查找就会越来越低,等同于遍历，二分查找就失去了意义。在检索的时候效率其实差不多，都是通过平衡来二分查找。但对于插入删除等操作效率提高很多。C</p>
<h3 id="ConcurrentHashmap和Hashtable对比"><a href="#ConcurrentHashmap和Hashtable对比" class="headerlink" title="ConcurrentHashmap和Hashtable对比"></a>ConcurrentHashmap和Hashtable对比</h3><p>（这是目前面试第一次碰到这个问题）</p>
<p>（1）HashMap是非线程安全的，HashTable是线程安全的，内部的方法基本都经过synchronized修饰。</p>
<p>（2）因为同步、哈希性能等原因，性能肯定是HashMap更佳，因此HashTable已被淘汰。</p>
<p>（3） HashMap允许有null值的存在，而在HashTable中put进的键值只要有一个null，直接抛出NullPointerException。</p>
<p>（4）HashMap默认初始化数组的大小为16，HashTable为11。前者扩容时乘2，使用位运算取得哈希，效率高于取模。而后者为乘2加1，都是素数和奇数，这样取模哈希结果更均匀。</p>
<p>（5）HashTable里使用的是synchronized关键字，这其实是<strong>对对象加锁</strong>，锁住的都是对象整体，当Hashtable的大小增加到一定的时候，性能会急剧下降，因为迭代时需要被锁定很长的时间。</p>
<p>（6）ConcurrentHashmap也是线程安全的，但是效率比Hashtable高很多倍，因为ConcurrentHashmap使用了分段锁，并不对整个数据进行锁定。</p>
<p>分段锁实现理解：在ConcurrentHashMap中使用了一个包含16个锁的数组，每个锁保护所有散列桶的1/16，其中第N个散列桶由第（N mod 16）个锁来保护。假设使用合理的散列算法使关键字能够均匀的分部，那么这大约能使对锁的请求减少到越来的1/16。也正是这项技术使得ConcurrentHashMap支持多达16个并发的写入线程。</p>
<h3 id="常用的集合类"><a href="#常用的集合类" class="headerlink" title="常用的集合类"></a>常用的集合类</h3><p>List</p>
<p>(1)ArrayList 数组结构，插入移除数据慢，查询数据快，按索引查找，不是线程安全的。</p>
<p>(2)LinkedList 链表结构，插入移除数据块，只需要替换首尾节点地址就行，查询数据慢，需要按列表节点顺序依次查找。不是线程安全。</p>
<p>(3)Vector 实现可自动增长的数组结构，有序，可重复，线程安全。</p>
<p>Set</p>
<p>Set的特点：无序，不重复。</p>
<p>(1)HashSet 能够快速定位一个元素。存入HashSet中的对象必须实现HashCode方法</p>
<p>如果想要排序，可以使用TreeSet。</p>
<p>Map:</p>
<p>Map是一种把键对象和值对象进行关联的一种容器。</p>
<p>特点：key不允许重复。</p>
<p>(1)HashMap 实现一个键到值映射的哈希表，通过键取得对象，没有顺序，通过get(key)来获取value，允许存储空对象，而且允许键是空(由于键必须是唯一，当然只能有一个)。</p>
<p>(2)HashTable 实现一个映像，所有的键必须非空，线程安全。如果处理的数据比较大，可以考虑concurrentHashMap,采用分片加锁，提高程序运行效率。</p>
<p>(3)TreeMap 实现排序。</p>
<p>(4)ConcurrentHashMap 线程安全，比hashtable效率高，内部实现是分片锁定。</p>
<h3 id="为什么实现runnable接口，不继承thread类"><a href="#为什么实现runnable接口，不继承thread类" class="headerlink" title="为什么实现runnable接口，不继承thread类"></a>为什么实现runnable接口，不继承thread类</h3><p>在JAVA语言中类和类之间是单继承的,而接口和接口之间是多继承的.也就是说,如果你继承了Thread类之后就再也不能继承其他的类了,这在实际开发中是相当不方便的.而实现Runnable接口就不会有这个麻烦了,因为接口是多继承的,你实现一个接口之后只要你需要就可以继续实现其他的接口而没有任何限制.从这一点上来说,实现Runnable比继承Thread要好许多。</p>
<h3 id="ioc的理解"><a href="#ioc的理解" class="headerlink" title="ioc的理解"></a>ioc的理解</h3><p>就是将控制权从业务代码里面脱离出来,交给专门的容器,让他们来管理Bean。</p>
<h3 id="springmvc流程"><a href="#springmvc流程" class="headerlink" title="springmvc流程"></a>springmvc流程</h3><p>以前的博客有，不写了。画图更好理解。</p>
<h3 id="spring结合mybatis所需配置文件"><a href="#spring结合mybatis所需配置文件" class="headerlink" title="spring结合mybatis所需配置文件"></a>spring结合mybatis所需配置文件</h3><p>配置ApplicationContext.xml文件</p>
<p>配置db.properties文件</p>
<h3 id="html中常见的标签"><a href="#html中常见的标签" class="headerlink" title="html中常见的标签"></a>html中常见的标签</h3><p><a href="https://blog.csdn.net/zuoluoboy/article/details/7490699?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param">https://blog.csdn.net/zuoluoboy/article/details/7490699?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param</a></p>
<h3 id="JMM模型"><a href="#JMM模型" class="headerlink" title="JMM模型"></a>JMM模型</h3><p>以前的博客有</p>
<h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><h3 id="反射的用途"><a href="#反射的用途" class="headerlink" title="反射的用途"></a>反射的用途</h3><p>Class.forName(“com.mysql.jdbc.Driver”);    </p>
<p>Java的反射（reflection）机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性，既然能拿到那么，我们就可以修改部分类型信息；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射（reflection）机制。</p>
<h3 id="sql分页插件"><a href="#sql分页插件" class="headerlink" title="sql分页插件"></a>sql分页插件</h3><p><strong>pagehelper</strong>：PageHelper首先将前端传递的参数保存到page这个对象中，接着将page的副本存放入ThreadLoacl中，这样可以保证分页的时候，参数互不影响，接着利用了mybatis提供的拦截器，取得ThreadLocal的值，重新拼装分页SQL，完成分页。</p>
<h3 id="ArrayList底层实现"><a href="#ArrayList底层实现" class="headerlink" title="ArrayList底层实现"></a>ArrayList底层实现</h3><p>ArrayList其实就是一个不定长的数组。</p>
<h3 id="ArrayList和LinkedList区别"><a href="#ArrayList和LinkedList区别" class="headerlink" title="ArrayList和LinkedList区别"></a>ArrayList和LinkedList区别</h3><p>ArrayList进行随机访问所消耗的时间是固定的，因此随机访问时效率比较高。</p>
<p>LinkedList是不支持快速的随机访问的，但是在插入删除时效率比较高。</p>
<p>因为ArrayList的内部实现是基于基础的对象数组的，因此，它使用get方法访问列表中的任意一个元素时 (random access)，它的速度要比LinkedList快。</p>
<p>LinkedList中的get方法是按照顺序从列表的一端开始检查，直到另外一端。所以随机访问时ArrayList效率明显比LinkedList效率要高。</p>
<p>但是在大量插入删除操作上LinkedList效率又明显比ArrayList要高。</p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2020/08/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><blockquote>
<p>饿汉式：不管有没有被调用，在程序启动时就创建好对象，可能会造成内存的浪费。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;懒汉式&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Single SINGLE = <span class="keyword">new</span> Single();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SINGLE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>懒汉式：在被调用时，再创建一个实例。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Single SINGLE;</span><br><span class="line"><span class="comment">//DCL懒汉式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (SINGLE == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Single.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (SINGLE == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    SINGLE = <span class="keyword">new</span> Single();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> SINGLE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>volatile</code> ：在 <code>SINGLE = new Single();</code>的时候，实际上要经过三个步骤：1. 分配内存空间。  2. 执行构造方法，初始化对象。  3. 把这个对象指向这个空间。 这三个步骤可能会发生指令重排的问题，所以要加volatile防止指令重排。</p>
<blockquote>
<p>静态内部类实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Holder</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Holder  <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClass.HOLDER;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Holder HOLDER = <span class="keyword">new</span> Holder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>反射破坏单例模式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Single SINGLE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (SINGLE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Single.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (SINGLE == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    SINGLE = <span class="keyword">new</span> Single();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> SINGLE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Single instance = Single.getInstance();</span><br><span class="line">        Constructor&lt;Single&gt; declaredConstructor = Single.class.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">        declaredConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Single instance2 = declaredConstructor.newInstance();</span><br><span class="line">        System.out.println(instance);</span><br><span class="line">        System.out.println(instance2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如何防止反射破坏单例模式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Single.class)&#123;</span><br><span class="line">            <span class="keyword">if</span> (SINGLE!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;不要用反射破坏单例&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Single SINGLE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (SINGLE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Single.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (SINGLE == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    SINGLE = <span class="keyword">new</span> Single();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> SINGLE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Single instance = Single.getInstance();</span><br><span class="line">        Constructor&lt;Single&gt; declaredConstructor = Single.class.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">        declaredConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Single instance2 = declaredConstructor.newInstance();</span><br><span class="line">        System.out.println(instance);</span><br><span class="line">        System.out.println(instance2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200818110931967.png" alt="image-20200818110931967"></p>
<p>但是这种情况是在先从getInstance()然后再从反射拿到新的实例对象，如果直接用反射拿对象，还是能拿到两个对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// Single instance = Single.getInstance();</span></span><br><span class="line">    Constructor&lt;Single&gt; declaredConstructor = Single.class.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">    declaredConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Single instance2 = declaredConstructor.newInstance();</span><br><span class="line">    Single instance3 = declaredConstructor.newInstance();</span><br><span class="line">    System.out.println(instance2);</span><br><span class="line">    System.out.println(instance3</span><br><span class="line">                      );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200818111402735.png" alt="image-20200818111402735"></p>
<p><strong>建立标志位</strong>，<strong>解决反射问题</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Single.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="keyword">false</span>) &#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;不要用反射破坏单例&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Single SINGLE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (SINGLE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Single.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (SINGLE == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    SINGLE = <span class="keyword">new</span> Single();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> SINGLE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// Single instance = Single.getInstance();</span></span><br><span class="line">        Constructor&lt;Single&gt; declaredConstructor = Single.class.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">        declaredConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Single instance2 = declaredConstructor.newInstance();</span><br><span class="line">        Single instance3 = declaredConstructor.newInstance();</span><br><span class="line">        System.out.println(instance3);</span><br><span class="line">        System.out.println(instance2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此时只能通过反射拿到一个实例对象，符合单例模式要求。</p>
<hr>
<p>但现在还有一个新的问题，当通过反射拿到flag的时候，修改flag的参数，也可以再次新建一个实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Single.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="keyword">false</span>) &#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;不要用反射破坏单例&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Single SINGLE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (SINGLE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Single.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (SINGLE == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    SINGLE = <span class="keyword">new</span> Single();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> SINGLE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// Single instance = Single.getInstance();</span></span><br><span class="line">        Field flag = Single.class.getDeclaredField(&quot;flag&quot;);</span><br><span class="line">        flag.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Constructor&lt;Single&gt; declaredConstructor = Single.class.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">        declaredConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Single instance1 = declaredConstructor.newInstance();</span><br><span class="line">        flag.set(instance1, <span class="keyword">false</span>);</span><br><span class="line">        Single instance2 = declaredConstructor.newInstance();</span><br><span class="line">        System.out.println(instance1);</span><br><span class="line">        System.out.println(instance2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>目前我认为无解。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>单例模式</tag>
      </tags>
  </entry>
  <entry>
    <title>前端基础css，js，jQurey</title>
    <url>/2020/08/17/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80css%EF%BC%8Cjs%EF%BC%8CjQurey/</url>
    <content><![CDATA[<h1 id="css，js，jQurey"><a href="#css，js，jQurey" class="headerlink" title="css，js，jQurey"></a>css，js，jQurey</h1><p>学习目标：修改套用模板。</p>
<p>本文所参考内容： <a href="https://jquery.cuishifeng.cn/">https://jquery.cuishifeng.cn/</a></p>
<p>​                                <a href="https://www.liaoxuefeng.com/wiki/1022910821149312">https://www.liaoxuefeng.com/wiki/1022910821149312</a></p>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><blockquote>
<p>Cascading Style Sheet 级联样式表。</p>
</blockquote>
<h4 id="位置："><a href="#位置：" class="headerlink" title="位置："></a>位置：</h4><ul>
<li><p>行内样式</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=&quot;color:red;&quot;&gt;行内样式&lt;/h1&gt; </span><br><span class="line">&lt;p style=&quot;font-size:14px; color:green;&quot;&gt;直接在HTML标签中设置的样式&lt;/p&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>内部样式表</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;行内样式&lt;/h1&gt; </span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt; </span><br><span class="line">    <span class="selector-tag">h1</span>&#123;<span class="attribute">color</span>: green; &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>外部样式表</p>
<p>CSS代码保存在扩展名为.css的样式表中，使用链接的形式引入。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;chrome-search://local-ntp/animations.css&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>还可以使用<code>@import url(&quot;style.css&quot;);</code>的形式导入，不常用，css2.1特有。 </p>
</li>
</ul>
<p>**优先级:行内样式&gt;内部样式表&gt;外部样式表 **</p>
<h4 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h4><ul>
<li><p>标签选择器</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;p&gt;test&lt;/p&gt;</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">  <span class="selector-tag">p</span>&#123;<span class="attribute">font-size</span>: <span class="number">16px</span>&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>类选择器</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;p class=&quot;alert&quot;&gt;happy&lt;/p&gt;</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">  <span class="selector-class">.alert</span>&#123;<span class="attribute">font-size</span>: <span class="number">160px</span>&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ID选择器</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;p  id=&quot;test1&quot;&gt;id选择器&lt;/p&gt;</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">  <span class="selector-id">#test1</span>&#123;<span class="attribute">font-size</span>: <span class="number">167px</span>;&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>优先级：ID&gt;类&gt;标签</strong></p>
<h4 id="高级选择器"><a href="#高级选择器" class="headerlink" title="高级选择器"></a>高级选择器</h4><ul>
<li><p>后代选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#cc003a</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>body下所有p标签的背景全部变为#cc003a色。</p>
</li>
<li><p>子选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&gt;<span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#cc003a</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>body下第一层元素的背景变为#cc003a色。</p>
</li>
<li><p>相邻兄弟选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;p&gt;test&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;alert&quot;&gt;happy&lt;/p&gt;</span><br><span class="line">&lt;p id=&quot;test1&quot;&gt;id选择器&lt;/p&gt;</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">  <span class="selector-class">.alert</span>+<span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#cc003a</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>  .alert+p &#123; background: #cc003a; &#125;</code> alert的下一个标签变为#cc003a色。</p>
</li>
<li><p>通用兄弟选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.alert</span>~<span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#cc003a</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>alert后面所有的p标签变为 #cc003a色。</p>
</li>
<li><p>属性选择器</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;p1&lt;/p&gt;</span><br><span class="line">&lt;p&gt;p2&lt;/p&gt;</span><br><span class="line">&lt;p id=&quot;1&quot;&gt;p3&lt;/p&gt;</span><br><span class="line">&lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">  &lt;li&gt;li1&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;li2&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;li3&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">  <span class="selector-tag">p</span><span class="selector-attr">[id]</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>有id属性的p标签，背景变为黄色，id后不加value即为所有带id属性的全部变为yellow，加value即某一id背景变为黄色。</p>
</li>
<li><p>E[attr*=val]属性选择器</p>
<p>由上面的id可以推得：标签[属性=值]的表示方法就可以改变任意样式。</p>
</li>
</ul>
<h4 id="背景设置"><a href="#背景设置" class="headerlink" title="背景设置"></a>背景设置</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#FFF</span>;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#C00</span> <span class="built_in">url</span>(../image/arrow-down.gif) <span class="number">205px</span> <span class="number">10px</span> no-repeat;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">background</span>: 背景颜色 背景图像 背景定位 背景不重复显示</span><br></pre></td></tr></table></figure>

<h4 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h4><p><img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200817142404783.png" alt="image-20200817142404783"></p>
<p>直接看源码，在网页上修改最直观。</p>
<img src= "/img/loading.gif" data-lazy-src="C:\Users\杨清宇\AppData\Roaming\Typora\typora-user-images\image-20200817142555516.png" alt="image-20200817142555516" style="zoom: 50%;" />

<h4 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h4><p>浮动分为左右浮动，本次举例采用左浮动。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;p class=&quot;layer01&quot;&gt;p1&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;layer02&quot;&gt;p2&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;layer03&quot;&gt;p3&lt;/p&gt;</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">  <span class="selector-class">.layer01</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#F00</span> dashed;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.layer02</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#00F</span> dashed;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.layer03</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#060</span> dashed;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>最终效果：<img src= "/img/loading.gif" data-lazy-src="C:\Users\杨清宇\AppData\Roaming\Typora\typora-user-images\image-20200817143105169.png" alt="image-20200817143105046"  /></p>
<h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><p><strong>相对定位</strong></p>
<ul>
<li><p>相对定位的特性</p>
<ul>
<li>相对于自己的初始位置来定位</li>
<li>元素位置发生偏移后，它原来的位置会被保留下来</li>
<li>层级提高，可以把标准文档流中的元素及浮动元素盖在下边</li>
</ul>
</li>
<li><p>相对定位的使用场景</p>
<ul>
<li>相对定位一般情况下很少自己单独使用，都是配合绝对定位使用，为绝对定位创造定位父级而又不设置偏移量</li>
</ul>
</li>
</ul>
<p><strong>绝对定位</strong></p>
<ul>
<li><p>绝对定位的特性</p>
<ul>
<li>绝对定位是相对于它的定位父级的位置来定位，如果没有设置定位父级，则相对浏览器窗口来定位</li>
<li>元素位置发生偏移后，原来的位置不会被保留</li>
<li>层级提高，可以把标准文档流中的元素及浮动元素盖在下边</li>
<li>设置绝对定位的元素脱离文档流</li>
</ul>
</li>
<li><p>绝对定位的使用场景</p>
<ul>
<li>一般情况下，绝对定位用在下拉菜单、焦点图轮播、弹出数字气泡、特别花边等场景</li>
</ul>
</li>
</ul>
<p><strong>固定定位</strong></p>
<ul>
<li><p>固定定位的特性</p>
<ul>
<li>相对浏览器窗口来定位</li>
<li>偏移量不会随滚动条的移动而移动</li>
</ul>
</li>
<li><p>固定定位的使用场景</p>
<ul>
<li>一般在网页中被用在窗口左右两边的固定广告、返回顶部图标、吸顶导航栏等</li>
</ul>
</li>
</ul>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>因为JQuery的出现，JS原生代码使用较少，本文只指出重点JS语句。</p>
<p>总体而言，我认为JavaScript的限制级别较低，一般情况下都不会报错。</p>
<h4 id="引入JS"><a href="#引入JS" class="headerlink" title="引入JS"></a>引入JS</h4><ul>
<li><p>由 <code>&lt;script&gt;...&lt;/script&gt; </code>包含的代码就是JavaScript代码，它将直接被浏览器执行。</p>
</li>
<li><p>把JavaScript代码放到一个单独的.js文件，然后在HTML中通过 <code>&lt;script src=&quot;...&quot;&gt; &lt;/script&gt;</code> 引入这个文件</p>
</li>
</ul>
<h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符=="></a>比较运算符==</h4><p>JavaScript在设计时，有两种比较运算符：</p>
<ul>
<li><p>== 比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；</p>
</li>
<li><p>=== 比较，它不会自动转换数据类型，如果数据类型不一致，返回 false ，如果一致，再比较。</p>
</li>
</ul>
<p>一遍情况下要使用===比较，不建议使用==比较。</p>
<h4 id="strict模式"><a href="#strict模式" class="headerlink" title="strict模式"></a>strict模式</h4><p>如果申明变量时不加var，这个变量就成了全局变量，会引起变量间的冲突。同名变量在不同的函数体内互不冲突。</p>
<p>启用strict模式的方法是在JavaScript代码的第一行写上：’use strict’; 当出现没有var申明的变量时，会报错。</p>
<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>函数的申明方式：</p>
<ul>
<li><pre><code class="js">  function abs(x) &#123;
    if (x &gt;= 0) &#123;
      return x;
    &#125; else &#123;
      return -x;
    &#125;
  &#125;

abs(10);
&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &amp;#96;&amp;#96;&amp;#96;js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var abs &amp;#x3D; function (x) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      if (x &amp;gt;&amp;#x3D; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return -x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  abs(10);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;
</code></pre>
</li>
</ul>
<p>JavaScript还有一个免费赠送的关键字 arguments ，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。</p>
<ul>
<li><pre><code class="java">  function foo(x) &#123;
    console.log(&#39;x = &#39; + x);
    for (var i = 0; i &lt; arguments.length; i++) &#123;
      console.log(&#39;arg &#39; + i + &#39; = &#39; + arguments[i]);
    &#125;
  &#125;
  foo(10, 20, 30);
&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &amp;#96;&amp;#96;&amp;#96;js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#39;use strict&amp;#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    function foo() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      var x &amp;#x3D; &amp;#39;Hello, &amp;#39; + y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      console.log(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      var y &amp;#x3D; &amp;#39;Bob&amp;#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    foo();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;
</code></pre>
</li>
</ul>
<p>实际上为</p>
<ul>
<li><pre><code class="js">  function foo() &#123;
    var y;
   // 提升变量y的申明，此时y为undefined
    var x = &#39;Hello, &#39; + y;
    console.log(x);
    y = &#39;Bob&#39;;
  &#125;
&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;全局作用域window：window就是一个没有写出来的最外围函数，上文代码中的foo()，执行window.foo()会有相同的效果。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#### 变量申明&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#96;let&amp;#96; 申明块级作用域，例如for循环中的i  就可以申明为 &amp;#96;let i &amp;#x3D; 0&amp;#96;   。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#### 常量申明&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在ES6之前，无法申明常量，只能大写属性名来表示这是一个常量。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ES6以后出现了&amp;#96;const&amp;#96;关键字，直接定义常量，例如&amp;#96;const Π&amp;#x3D;3.14&amp;#96;  。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#### DOM&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; (Document Object Model) HTML文档被浏览器解析后就是一棵DOM树，要改变HTML的结构，就需要通过JavaScript来操作DOM。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;document 对象表示当前页面。由于HTML在浏览器中以DOM形式表示为树形结构， document 对象就是整个DOM树的根节点。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dom的常用方法：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* document.getElementById() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* document.getElementsByTagName()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* document.getElementsByClassName() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#### 通过DOM操作表单获取值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HTML表单的输入控件主要有以下几种：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 文本框，对应的 &amp;#96;&amp;lt;input type&amp;#x3D;&amp;quot;text&amp;quot;&amp;gt;&amp;#96; ，用于输入文本；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 口令框，对应的 &amp;#96;&amp;lt;input type&amp;#x3D;&amp;quot;password&amp;quot;&amp;gt;&amp;#96; ，用于输入口令；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 单选框，对应的 &amp;#96;&amp;lt;input type&amp;#x3D;&amp;quot;radio&amp;quot;&amp;gt;&amp;#96; ，用于选择一项；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 复选框，对应的 &amp;#96;&amp;lt;input type&amp;#x3D;&amp;quot;checkbox&amp;quot;&amp;gt;&amp;#96; ，用于选择多项；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 下拉框，对应的 &amp;#96;&amp;lt;select&amp;gt;&amp;#96; ，用于选择一项；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 隐藏文本，对应的 &amp;#96;&amp;lt;input type&amp;#x3D;&amp;quot;hidden&amp;quot;&amp;gt;&amp;#96; ，用户不可见，但表单提交时会把隐藏文本发送到服务器。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#96;&amp;#96;&amp;#96;javascript&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#x2F;&amp;#x2F; &amp;lt;input type&amp;#x3D;&amp;quot;text&amp;quot; id&amp;#x3D;&amp;quot;email&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; var input &amp;#x3D; document.getElementById(&amp;#39;email&amp;#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     input.value;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;
</code></pre>
</li>
</ul>
<h4 id="提交表单"><a href="#提交表单" class="headerlink" title="提交表单"></a>提交表单</h4><p>响应一个 button 的 click 事件，在JavaScript代码中提交表单</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200817154031772.png" alt="image-20200817154031772"></p>
<h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><blockquote>
<p>JSON是JavaScript Object Notation的缩写，它是一种数据交换格式。</p>
</blockquote>
<p>以前在postman上进行crud操作时总是用到json数据，实际上就是一个序列化反序列化，使程序能够读懂内容的东西。</p>
<ul>
<li><p>对象表示为键值对，数据由逗号分隔</p>
</li>
<li><p>花括号保存对象</p>
</li>
<li><p>方括号保存数组</p>
</li>
</ul>
<p>要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法。</p>
<p>要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法。</p>
<h4 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h4><blockquote>
<p>Asynchronous JavaScript and XML，意思就是用JavaScript执行异步网络请求。</p>
</blockquote>
<p>通俗的讲，如果要让用户留在当前页面中，同时发出新的HTTP请求，就必须用JavaScript发送这个新请求，接收到数据后，再用JavaScript更新页面，这样一来，用户就感觉自己仍然停留在当前页面，但是数据却可以不断地更新。</p>
<h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><blockquote>
<p>Write Less, Do More</p>
</blockquote>
<p>我认为Jquery就像java中的工具类一样，把复杂的代码封装起来，引出相对简单的代码进行替代。</p>
<h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><p>可以引入本地文件，或者网上的链接。</p>
<h4 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h4><p>$$<br>$(selector).action()<br>$$</p>
<ul>
<li><p>美元符号定义 jQuery</p>
</li>
<li><p>选择符（selector）”查询”和”查找” HTML 元素</p>
</li>
<li><p>jQuery 的 action() 执行对元素的操作</p>
</li>
</ul>
<h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><p>在JS中，进行DOM操作时，通常要拿到id，tag，class来进行其他操作，但代码量较大，重复率高。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查找&lt;div id=&quot;abc&quot;&gt;:</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> div = $(<span class="string">&#x27;#abc&#x27;</span>);</span><br><span class="line"><span class="comment">//查找p标签</span></span><br><span class="line"><span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ps = $(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"><span class="comment">//查找&lt;dic class=&quot;time&quot;&gt;</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;red&#x27;</span>) </span><br><span class="line"><span class="keyword">var</span> a = $(<span class="string">&#x27;.red&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>在CSS中，标签[属性=值]的表示方法就可以改变任意样式，JS也一样<code>var x= $(&#39;[属性=值]&#39;); </code> 的方式就能拿到任意想要的值。</p>
<h4 id="操作DOM"><a href="#操作DOM" class="headerlink" title="操作DOM"></a>操作DOM</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;test-ul&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;js&quot;</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">name</span>=<span class="string">&quot;book&quot;</span>&gt;</span>Java <span class="symbol">&amp;amp;</span> JavaScript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>获取文本：<code>$(&#39;#test-ul li[name=book]&#39;).text();  </code>当test中不写参数则为获取文本，当填入参数时就成了设置文本。html方法也有这个效果。</p>
<p>隐藏/显示树节点：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = $(<span class="string">&#x27;a[target=_blank]&#x27;</span>); </span><br><span class="line">a.hide(); <span class="comment">// 隐藏 </span></span><br><span class="line">a.show(); <span class="comment">// 显示</span></span><br></pre></td></tr></table></figure>

<p>操作DOM节点的属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &lt;div id=&quot;test-div&quot; name=&quot;Test&quot; start=&quot;1&quot;&gt;...&lt;/div&gt; </span></span><br><span class="line"><span class="keyword">var</span> div = $(<span class="string">&#x27;#test-div&#x27;</span>); </span><br><span class="line">div.attr(<span class="string">&#x27;data&#x27;</span>); <span class="comment">// undefined, 属性不存在 </span></span><br><span class="line">div.attr(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// &#x27;Test&#x27; </span></span><br><span class="line">div.attr(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Hello&#x27;</span>); <span class="comment">// div的name属性变为&#x27;Hello&#x27; </span></span><br><span class="line">div.removeAttr(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// 删除name属性 </span></span><br><span class="line">div.attr(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// undefined </span></span><br></pre></td></tr></table></figure>

<p>修改文本框内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;input id=&quot;test-input&quot; name=&quot;email&quot; value=&quot;&quot;&gt; </span></span><br><span class="line"><span class="comment">&lt;select id=&quot;test-select&quot; name=&quot;city&quot;&gt; </span></span><br><span class="line"><span class="comment">&lt;option value=&quot;BJ&quot; selected&gt;Beijing&lt;/option&gt; </span></span><br><span class="line"><span class="comment">&lt;option value=&quot;SH&quot;&gt;Shanghai&lt;/option&gt; </span></span><br><span class="line"><span class="comment">&lt;option value=&quot;SZ&quot;&gt;Shenzhen&lt;/option&gt; </span></span><br><span class="line"><span class="comment">&lt;/select&gt; </span></span><br><span class="line"><span class="comment">&lt;textarea id=&quot;test-textarea&quot;&gt;Hello&lt;/textarea&gt; </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> </span><br><span class="line">input = $(<span class="string">&#x27;#test-input&#x27;</span>), </span><br><span class="line">select = $(<span class="string">&#x27;#test-select&#x27;</span>), </span><br><span class="line">textarea = $(<span class="string">&#x27;#test-textarea&#x27;</span>); </span><br><span class="line">input.val(); <span class="comment">// &#x27;test&#x27; </span></span><br><span class="line">input.val(<span class="string">&#x27;abc@example.com&#x27;</span>); <span class="comment">// 文本框的内容已变为abc@example.com </span></span><br><span class="line">select.val(); <span class="comment">// &#x27;BJ&#x27; </span></span><br><span class="line">select.val(<span class="string">&#x27;SH&#x27;</span>); <span class="comment">// 选择框已变为Shanghai </span></span><br><span class="line">textarea.val(); <span class="comment">// &#x27;Hello&#x27; </span></span><br><span class="line">textarea.val(<span class="string">&#x27;Hi&#x27;</span>); <span class="comment">// 文本区域已更新为&#x27;Hi&#x27; </span></span><br></pre></td></tr></table></figure>

<p>新增节点：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ul = $(<span class="string">&#x27;#test-div&gt;ul&#x27;</span>); <span class="comment">//先拿到ul节点</span></span><br><span class="line">ul.append(<span class="string">&#x27;&lt;li&gt;&lt;span&gt;Haskell&lt;/span&gt;&lt;/li&gt;&#x27;</span>); <span class="comment">//将新的子节点加入ul内 队尾</span></span><br><span class="line">ul.prepend(<span class="string">&#x27;&lt;li&gt;&lt;span&gt;Haskell&lt;/span&gt;&lt;/li&gt;&#x27;</span>); <span class="comment">//将新的子节点加入ul内 队首</span></span><br></pre></td></tr></table></figure>

<p>删除树的某个节点：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> li = $(<span class="string">&#x27;#test-div&gt;ul&gt;li&#x27;</span>); </span><br><span class="line">li.remove(); <span class="comment">// 所有&lt;li&gt;全被删除</span></span><br></pre></td></tr></table></figure>



<h4 id="jQuery操作CSS"><a href="#jQuery操作CSS" class="headerlink" title="jQuery操作CSS"></a>jQuery操作CSS</h4><p><code>$(&#39;#test-css li.dy&gt;span&#39;).css(&#39;background-color&#39;, &#39;#ffd351&#39;).css(&#39;color&#39;, &#39;red&#39;);</code> </p>
<p>代码分析：</p>
<p>首先符合<code>$(selector).action()</code>公式，$内放的为id值以及标签为li，value中含有dy的元素，调用css样式方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">  &lt;script src=&quot;http://libs.baidu.com/jquery/2.1.4/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul id=<span class="string">&quot;test-css&quot;</span>&gt;</span><br><span class="line">  &lt;li class=&quot;lang dy&quot;&gt;&lt;span&gt;JavaScript&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;lang&quot;&gt;&lt;span&gt;Java&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;lang dy&quot;&gt;&lt;span&gt;Python&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;lang&quot;&gt;&lt;span&gt;Swift&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;lang dy&quot;&gt;&lt;span&gt;Scheme&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;$(&#x27;#test-css li.dy&gt;span&#x27;).css(&#x27;background-color&#x27;, &#x27;#ffd351&#x27;).css(&#x27;color&#x27;, &#x27;red&#x27;);&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200817160753110.png" alt="image-20200817160753110"></p>
<h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p>绑定事件</p>
<blockquote>
<p>语法糖</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">&#x27;ready&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);被简化成$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>CAS</title>
    <url>/2020/08/15/CAS/</url>
    <content><![CDATA[<h1 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h1><p>CAS全称为Compare-And-Swap，它是一条CPU并发原语。</p>
<p>它的功能是判断内存某个位置的值是否为预期值，如果是则更改为新的值，这个过程是原子的。</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CAS</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">        atomicInteger.getAndIncrement();</span><br><span class="line">        System.out.println(atomicInteger);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在使用getAndIncrement时，会对数据进行加一操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>getAndIncrement实际是由unsafe类中的getAndAddInt方法实现的，this代表当前对象，valueOffset是内存偏移量（当前对象的内存地址），1是所要加的数。</p>
<p>Unsafe是CAS核心类，由于java方法无法访问底层系统，需要通过本地（native）方法来访问，Unsafe相当于一个后门，基于该类可以直接操作特定内存的数据。Unsafe类存在于sun.misc包中，其内部方法操作可以像C的指针一样直接操作内存，因为java中CAS操作的执行依赖于Unsafe类的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">    &#125; <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200814224025842.png" alt="image-20200814224025842" style="zoom:50%;" />

<p>var 1是当前对象，var 2是当前的地址偏移量，var4是1，var5就是当前对象的地址偏移量的值，即如果当前对象的地址偏移量的值不等于var5，说明这个值已经被改过了，compareAndSwapInt返回false，!this.compareAndSwapInt就为true，继续进行do while循环，直到当前对象的地址偏移量的值等于var5。跳出循环，返回var5.</p>
</blockquote>
<h2 id="CAS缺点"><a href="#CAS缺点" class="headerlink" title="CAS缺点"></a>CAS缺点</h2><p>循环时间长，cpu开销大。</p>
<p>只能保证一个共享变量的原子操作。</p>
<p>ABA问题。</p>
<h2 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h2><p>当变量A由10变成100后，再由100变为10，这个过程中，对A进行CAS操作，发现实际值和初始值一致，直接对A进行了update。由于A有了一段时间为100的中间值，可能会对其他数据产生影响，但CAS依旧对他进行更新，可能会导致其他问题。</p>
<p><strong>解决办法</strong></p>
<p>添加版本号，使每一次修改版本号加一，再对比版本号得知数据是否修改。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CAS</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AtomicStampedReference&lt;Integer&gt; atomicStampedReference =</span><br><span class="line">                <span class="keyword">new</span> AtomicStampedReference&lt;&gt;(<span class="number">15</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(atomicStampedReference.compareAndSet(<span class="number">15</span>,<span class="number">17</span>,<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">        System.out.println(atomicStampedReference.getReference());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="AtomicInteger–-gt-AtomicReference"><a href="#AtomicInteger–-gt-AtomicReference" class="headerlink" title="AtomicInteger–&gt;AtomicReference"></a>AtomicInteger–&gt;AtomicReference</h2><p>想要保证数据一致性，就可以使用AtomicReference&lt;&gt;创建原子引用。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>volatile</title>
    <url>/2020/08/15/volatile%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="什么是volatile？"><a href="#什么是volatile？" class="headerlink" title="什么是volatile？"></a>什么是volatile？</h2><p>是java虚拟机提供的轻量级的同步机制。</p>
<h2 id="volatile特性"><a href="#volatile特性" class="headerlink" title="volatile特性"></a>volatile特性</h2><ol>
<li><p>保证可见性</p>
<p>当多个线程访问同一个变量时，其中一个线程修改了变量的值，其他的线程可以立即看到修改的值。即立刻刷新修改的值到主存而不是工作内存。</p>
</li>
<li><p>不保证原子性</p>
<p>在多个线程操作堆内存中的数据时，例如int a = 1；当线程一和线程二同时对a进行++操作时，根据JMM（Java memory model）原理，线程一二会将主内存中的数据分别复制到自己的工作内存中，在自己的工作内存中进行++操作，再将数据放回主内存中，此时线程一进行完++操作但线程二没有进行时，线程一会通知线程二a已经由1变为了2，所以线程二在进行++操作时，a会从2变为3再返回给主内存。但当大量线程进行a++操作时，某两个线程同时从主存中拿到了a=0的数据，且在第一个线程进行完a++操作后，a=1没有及时写回主存，而是线程二也进行a++操作，并将a=1写入到主存中，此时线程一也将a=1写回主存中，造成两次++操作只加了1.</p>
</li>
<li><p>禁止指令重排</p>
<p>大多数现代计算机为了提高性能而采取<a href="https://baike.baidu.com/item/%E4%B9%B1%E5%BA%8F%E6%89%A7%E8%A1%8C">乱序执行</a>，这使得内存屏障成为必须。在没有数据依赖性的情况下，多线程环境中线程交替执行，由于编译器指令重排的存在，两个线程使用的变量能否保证一致性是无法确认的，结果无法预测。</p>
<p>加入volatile关键字后，会在代码中生成内存屏障，内存屏障之前的所有写操作都要写入内存；内存屏障之后的读操作都可以获得同步屏障之前的写操作的结果。因此，对于敏感的程序块，写操作之后、读操作之前可以插入内存屏障。</p>
</li>
</ol>
<img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200803105130261.png" alt="image-20200803105130261" style="zoom: 50%;" />

<h2 id="JMM特性"><a href="#JMM特性" class="headerlink" title="JMM特性"></a>JMM特性</h2><ol>
<li>可见性</li>
<li>原子性</li>
<li>有序性</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql高级</title>
    <url>/2020/08/11/Mysql%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<h1 id="Mysql高级"><a href="#Mysql高级" class="headerlink" title="Mysql高级"></a>Mysql高级</h1><blockquote>
<p>索引: 排好序的数据结构。</p>
</blockquote>
<p><strong>为什么选用B树而不选用二叉树,红黑树,hash表?</strong></p>
<p>hash表:当使用范围查询时,例如id&gt;5,无法进入hash索引,只能不走索引查找。</p>
<p>二叉树:当树进行单边增长时,例如1–2–3–4–5–6时 ,查找6的时候,还需要查找六次。</p>
<p>红黑树:当数据量过大时,例如上百万数据,红黑树的高度n也会很大,2^n=数据量,此时如果查找的数据正好处于叶子节点,也会进行n次的磁盘io,出现和二叉树类似的问题。</p>
<p><strong>为什么使用B树?</strong></p>
<p>B树解决了红黑树高度的问题,使单次查找也很快,但范围查找依旧没有解决。</p>
<p><strong>索引使怎么支撑千万级表的快速查找?</strong></p>
<p>Mysql底层使用了B+树。一次磁盘io会调用一条节点。且B+树的叶子节点相互都有指针，也解决了范围查找的问题，例如查询id&gt;18，在通过B+树找到18以后，通过叶子节点的指针找到&gt;18的值。</p>
<img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200811102001048.png" alt="image-20200811102001048" style="zoom:50%;" />

<p><strong>表存储引擎类型</strong></p>
<p>Innodb和MyISAM.</p>
<p><strong>MyISAM</strong>：只支持表锁</p>
<p>MyISAM的key-value是通过索引值-磁盘文件指针进行查询。</p>
<p><strong>Innodb</strong>：支持行锁和表锁</p>
<p>聚集索引</p>
<p>Innodb的叶子节点包好了完整的数据记录。</p>
<p>为什么Innodb必须有主键？</p>
<p>在没有指定主键的情况下，系统会默认创建主键。推荐使用整型的自增主键，提高效率。</p>
<h4 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a><strong>联合索引</strong></h4><img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200811111321105.png" alt="image-20200811111321105" style="zoom:50%;" />

<p><strong>MySql调优</strong></p>
<p>三个大方向</p>
<ul>
<li>硬件调优：对CPU/磁盘/内存进行优化，扩容。</li>
<li>进程调优：对mysqlid进行调优，对mysql进程适当分配内存。</li>
<li>查询优化调优：充分利用Mysql的功能.</li>
</ul>
<p>查询优化调优：</p>
<p>使用 EXPLAIN 命令查看当前 SQL 是否使用了索引</p>
<ol>
<li><p>记录慢速查询</p>
<p>配置my.conf文件将慢速查询记录在查询日志当中<code>long_query_time = 5</code>，然后通过日志对SQL语句进行修改。</p>
</li>
<li><p>对查询进行缓存</p>
<p>查询的大致过程如下:</p>
<p>PHP 发出查询请求-&gt;数据库收到指令对查询语句进行分析-&gt;确定如何查询-&gt;从磁盘中加载信息-&gt;返回结果</p>
<p>如果你反复查询，他就反复执行这些。MySQL 有一个特性称为<em>查询缓存</em>，他可以将查询的结果保存在内存中，在很多情况下，这会极大地提高性能。不过，问题是查询缓存在默认情况下是禁用的。</p>
<p>将<code>query_cache_size = 32M</code> 添加到 /etc/my.conf 中可以启用 32MB 的查询缓存。</p>
</li>
<li><p>强制限制</p>
<p>可以在<code>mysqld</code> 中强制一些限制来确保系统负载不会导致资源耗尽的情况出现。</p>
</li>
<li><p>缓冲区和缓存</p>
<p>表缓存/线程缓存/关键字缓存/确定临时表的使用</p>
</li>
<li><p>利用子查询优化分页查询</p>
</li>
</ol>
<hr>
<h3 id="21条MySQL性能调优经验"><a href="#21条MySQL性能调优经验" class="headerlink" title="21条MySQL性能调优经验"></a>21条MySQL性能调优经验</h3><ol>
<li>为查询缓存优化你的查询</li>
<li>EXPLAIN 你的 SELECT 查询</li>
<li>当只要一行数据时使用 LIMIT 1</li>
<li>为搜索字段建索引</li>
<li>在Join表的时候使用相当类型的例，并将其索引</li>
<li>千万不要 ORDER BY RAND()</li>
<li>避免 SELECT *</li>
<li>永远为每张表设置一个ID</li>
<li>使用 ENUM 而不是 VARCHAR</li>
<li>从 PROCEDURE ANALYSE() 取得建议</li>
<li>尽可能的使用 NOT NULL</li>
<li>Prepared Statements</li>
<li>无缓冲的查询</li>
<li>把IP地址存成 UNSIGNED INT</li>
<li>固定长度的表会更快</li>
<li>垂直分割</li>
<li>拆分大的 DELETE 或 INSERT 语句</li>
<li>越小的列会越快</li>
<li>选择正确的存储引擎</li>
<li>使用一个对象关系映射器(Object Relational Mapper)</li>
<li>小心“永久链接”</li>
</ol>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/2020/08/10/Nginx/</url>
    <content><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><blockquote>
<p>占有内存少，并发能力强，为性能优化而生</p>
</blockquote>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>正向代理：</p>
<img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200810132155007.png" alt="image-20200810132155007" style="zoom:50%;" />

<p>反向代理：</p>
<img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200810133557044.png" alt="image-20200810133557044" style="zoom:50%;" />

<h3 id="实现反向代理1"><a href="#实现反向代理1" class="headerlink" title="实现反向代理1"></a>实现反向代理1</h3><img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200810142819244.png" alt="image-20200810142819244" style="zoom:50%;" />

<p>在nginx配置文件中把8080端口添加到端口为888的nginx服务器中。</p>
<img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200810145047041.png" alt="image-20200810145047041" style="zoom: 33%;" />

<p>访问888端口就能跳转到tomcat主页上，实现了反向代理。</p>
<h3 id="实现反向代理2"><a href="#实现反向代理2" class="headerlink" title="实现反向代理2"></a>实现反向代理2</h3><blockquote>
<p>需求：访问888/edu/ 跳转到8080</p>
<p>​            访问888/vod/ 跳转到8081</p>
</blockquote>
<p>准备两个tomcat，分别为8080/8081</p>
<p>在nginx配置文件中，再添加一个server，其他修改和上面相同，</p>
<img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200810150331999.png" alt="image-20200810150331999" style="zoom:50%;" /> 

<p><code>~/vod/</code> 为正则表达式，即带vod的全部转发到8081，edu同理。</p>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200810134431069.png" alt="image-20200810134431069" style="zoom:50%;" />

<blockquote>
<p>在访问相同地址时，nginx自动分配到两台服务器中，达到负载均衡的目的。</p>
</blockquote>
<p>策略：</p>
<p><strong>第一种 轮询（默认）</strong></p>
<p><strong>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器</strong> <strong>down</strong> <strong>掉，能自动剔除。</strong></p>
<p><strong>第二种</strong> <strong>weight</strong></p>
<p><strong>weight</strong> <strong>代表权重默认为</strong> <strong>1,</strong> <strong>权重越高被分配的客户端越多</strong></p>
<p><strong>第三种</strong> <strong>ip_hash</strong></p>
<p><strong>每个请求按访问</strong> <strong>ip</strong> <strong>的</strong> <strong>hash</strong> <strong>结果分配，这样每个访客固定访问一个后端服务器</strong></p>
<p><strong>第四种</strong> <strong>fair ** **（第三方）</strong></p>
<p><strong>按后端服务器的响应时间来分配请求，响应时间短的优先分配</strong></p>
<h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200810134917784.png" alt="image-20200810134917784" style="zoom:50%;" />





<h3 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h3><blockquote>
<p>当nginx宕机后，依旧可以访问服务器。</p>
</blockquote>
<img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200810203832896.png" alt="image-20200810203832896" style="zoom:50%;" />

<h2 id="nginx原理"><a href="#nginx原理" class="headerlink" title="nginx原理"></a>nginx原理</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200810204342149.png" alt="image-20200810204342149"></p>
<blockquote>
<p>当client发出请求后，Master将这个请求传递给worker，work开始争抢这个请求，当某一个worker拿到请求后，去服务器并携带信息返回。</p>
<p><strong>一个 master 和多个 woker 有好处</strong></p>
<p>（1）可以使用 nginx –s reload 热部署，利用 nginx 进行热部署操作。</p>
<p><strong>（</strong>2）每个 worker 是独立的进程，如果有其中的一个 worker 出现问题，其他 worker 独立的，继续进行争抢，实现请求过程，不会造成服务中断。</p>
<p>worker 数和服务器的 cpu 数相等是最为适宜的(类似redis)</p>
<p><strong>连接数 worker_connection</strong></p>
<p>发送请求，占用了 worker 的几个连接数？</p>
<ul>
<li>2个（访问静态资源） 或者 4 个（反向代理）</li>
</ul>
<p>nginx 有一个 master，有四个 woker，每个 woker 支持最大的连接数 1024，支持的最大并发数是多少？</p>
<ul>
<li><p>普通的静态访问最大并发数是： worker_connections（连接数） * worker_processes（work数量） /2，</p>
</li>
<li><p>而如果是 HTTP 作 为反向代理来说，最大并发数量应该是 worker_connections * worker_processes/4。</p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql</title>
    <url>/2020/08/02/Mysql/</url>
    <content><![CDATA[<h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><h2 id="索引是什么"><a href="#索引是什么" class="headerlink" title="索引是什么"></a>索引是什么</h2><p>　　索引（Index）是帮助MySQL高效获取数据的数据结构。可以得到索引的本质：索引是数据结构。<br>　　可以理解为“排好序的快速查找数据结构”<br>　　在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据,<br>这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。</p>
<h2 id="B树和B-树"><a href="#B树和B-树" class="headerlink" title="B树和B+树"></a>B树和B+树</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200801164411981.png" alt="B树" style="zoom:67%;" />B树</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200801164525053.png" alt="B+" style="zoom:67%;" />B+树</p>
<p><strong>B树和B+树区别</strong></p>
<p>B树每个节点都存储key和data，所有节点组成这棵树，并且叶子节点指针为null。</p>
<p>B+树只有叶子节点存储data，叶子节点包含了这棵树的所有键值，叶子节点不存储指针。</p>
<h2 id="页"><a href="#页" class="headerlink" title="页"></a>页</h2><img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200801213608860.png" alt="image-20200801213608860" style="zoom:60%;" />

<p>操作系统中，页是逻辑单位，磁盘读取数据时，是磁盘中取数据最小的基本逻辑单位   1页=4kb。</p>
<p>InnoDB中，1页为16kb，Mysql查询/磁盘io一次最少取出16kb数据。</p>
<p>每一页的页头都会有两个指针，一端指向上一页，一端指向下一页。</p>
<p>InnoDB插入数据的过程中用户所储存的数据按主键排序，虽然影响插入的效率，但是大大提高了查询的效率。</p>
<p>当插入数据后，会自动按照主键顺序进行分组，例如主键为1和2的两条数据都被分在了页目录下为1的组当中，且io时会先在页目录中查询，如图所示，例如查询主键为3的数据，由于页目录被分为1，4两组，所以会在1中进行查找（不一定必须能找到）。</p>
<p>在页目录的查询是按照二分法查找的，提高了效率。</p>
<img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200801214008194.png" alt="image-20200801214008194" style="zoom:50%;" />

<p>假如一页16kb的情况下只能储存四条数据，当有第五条数据存储进来时，默认会新建一页来存储数据，且用户数据区域及页目录会重新排序。</p>
<img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200801215956076.png" alt="image-20200801215956076" style="zoom:67%;" />

<p>当数据量庞大，页数较多时，会新建一页，将每个页目录中的头部取出，再次查询时就可以快速找到指定数据。（B+树形成）</p>
<p>Mysql的查询方式有两种：</p>
<ul>
<li>索引：即通过B+树快速找到指定数据。</li>
<li>全表扫描（顺序查找）：例如要查主键为10000的数据，从1、2、3、4、5的顺序开始找，直到找到指定数据。</li>
</ul>
<img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200801221543592.png" alt="image-20200801221543592" style="zoom:66%;" />

<p>辅助索引：例如用第2到第4个数作为索引依据生产B+树（非主键），还会按照大小进行排序，然后生成B+树。</p>
<p>但会造成数据的冗余，因为等于根节点又存了一遍数据，所以在叶子节点上不采用放入全值的方法，采用索引值+主键的方法，减少重复的数据，例如5235e会被替换成235+5，再去走主键索引。</p>
<p>最左前缀原则：如上图，例如要查*65（三位数），是无法走辅助索引的，因为辅助索引无法判断你的 * 的大小；但是65*就可以走辅助索引，因为知道65就知道在B+树的哪一分支去查询。</p>
<h2 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h2><p>Mysql5.7之前，当使用索引查找时，先在找到的索引叶子节点回推到主键索引中进行查找，再过滤出所需数据（where字段）。</p>
<p>Mysql5.7之后，当使用索引查找时，先过滤出所需数据（where字段），然后在找到的索引叶子节点回推到主键索引中进行查找。</p>
<h2 id="Mysql字符转换"><a href="#Mysql字符转换" class="headerlink" title="Mysql字符转换"></a>Mysql字符转换</h2><p>在int与string类型转换时都会转换成int类型，当string类型中也为数字时，转换成相应的数字；当string为字符时，一律转换为0.</p>
<p>注：在where中等号左边进行修改时，例如where id +1 = 9时，都不会走索引，直接全表扫描。</p>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul>
<li>begin开启事务</li>
<li>rollback回滚事务</li>
<li>commit提交事务</li>
</ul>
<h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><blockquote>
<p>读未提交（Read Uncommitted）</p>
</blockquote>
<p>脏读。</p>
<blockquote>
<p>读已提交（Read Committed）</p>
</blockquote>
<p>一个事务只能读到另一个已经提交的事务修改过的数据，并且其他事务对数据进行修改后都能查询到最新值，但会出现幻读、不可重复读。</p>
<blockquote>
<p>可重复读（Repeatable Read）</p>
</blockquote>
<p>当一个事务查询出数据时，另一事务修改了数据，且这个事务再次查询数据时，数据已经发生了变化，但查询到的结果没有变化。</p>
<p><strong>脏读</strong> ：一个事务读到其他事务还没有提交的但已经修改过的数据。</p>
<p><strong>幻读</strong> ：一个事务先根据某些条件查询出一些记录，之后另一个事务向表中添加了符合第一次事务查询的数据，原先的事务再次查询时，能把第二次事务所添加的数据也查询出来。</p>
<p><strong>不可重复读</strong> ：即当一个事务查询出数据时，另一事务修改了数据，且这个事务再次查询数据时，数据已经发生了变化，查询到了新的结果。</p>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>生产者消费者问题</title>
    <url>/2020/07/27/%E5%A4%9A%E7%BA%BF%E7%A8%8B----%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>去购物买炸鸡，店里只能做好十只鸡等着卖，突然来了十五个客人，要买十五只鸡，卖出十只后，剩下的五个客人只能等厨房做，厨房一次只能做一只鸡。</p>
<p><strong>synchronzied版本</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="comment">//TODO synchronzied</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPCFinal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Shop shop = <span class="keyword">new</span> Shop();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) shop.buy();</span><br><span class="line">        &#125;, <span class="string">&quot;customer&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) shop.sale();</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shop</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> chicken = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (chicken != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;厨房正在做&quot;</span>);</span><br><span class="line">        chicken++;</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (chicken == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有买到鸡&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;买到了一只鸡&quot;</span>);</span><br><span class="line">        chicken--;</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">customer买到了一只鸡</span><br><span class="line">customer买到了一只鸡</span><br><span class="line">customer买到了一只鸡</span><br><span class="line">customer买到了一只鸡</span><br><span class="line">customer买到了一只鸡</span><br><span class="line">customer买到了一只鸡</span><br><span class="line">customer买到了一只鸡</span><br><span class="line">customer买到了一只鸡</span><br><span class="line">customer买到了一只鸡</span><br><span class="line">customer买到了一只鸡</span><br><span class="line">没有买到鸡</span><br><span class="line">厨房正在做</span><br><span class="line">customer买到了一只鸡</span><br><span class="line">没有买到鸡</span><br><span class="line">厨房正在做</span><br><span class="line">customer买到了一只鸡</span><br><span class="line">没有买到鸡</span><br><span class="line">厨房正在做</span><br><span class="line">customer买到了一只鸡</span><br><span class="line">没有买到鸡</span><br><span class="line">厨房正在做</span><br><span class="line">customer买到了一只鸡</span><br><span class="line">没有买到鸡</span><br><span class="line">厨房正在做</span><br><span class="line">customer买到了一只鸡</span><br><span class="line">厨房正在做</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>因为在主方法中同时执行了两个线程，但第二个线程中的sale方法中写道，当鸡的数量不为零时是等待着的，所以一直执行buy方法，当buy方法执行了10次以后，鸡的数量为0，输出没有买到鸡并进行线程等待，此时sale方法开始运行，进行生产一只鸡的操作后通知其他线程，当buy线程收到通知后，执行了一次buy方法，买下了这只鸡，当想再买一只时，发现没有了，继续等待，此时sale方法再次运行，如此循环五次后，五个顾客都买到了，但是因为卖完最后一只鸡，鸡数量为0，sale方法再次被激活，又生产了一只鸡，但没有顾客了，所以线程一直在等待而没有结束。</p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><ul>
<li>当有两个厨房生产鸡的时候，如何保证只生产出一只鸡</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="comment">//TODO synchronized</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPCFinal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Shop shop = <span class="keyword">new</span> Shop();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) shop.buy();</span><br><span class="line">        &#125;, <span class="string">&quot;customer&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) shop.sale();</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) shop.sale();</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shop</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> chicken = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (chicken != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;厨房正在做&quot;</span>);</span><br><span class="line">        chicken++;</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (chicken == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有买到鸡&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;买到了一只鸡&quot;</span>+<span class="string">&quot;目前还剩&quot;</span>+(chicken-<span class="number">1</span>));</span><br><span class="line">        chicken--;</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><blockquote>
<p>在java1.8手册中提到，线程也可以唤醒，而不会被通知，中断或超时，即所谓的<strong>虚假唤醒</strong> 。  虽然这在实践中很少会发生，但应用程序必须通过测试应该使线程被唤醒的条件来防范，并且如果条件不满足则继续等待。  换句话说，等待应该总是出现在循环中，就像这样：   synchronized (obj) {<br>         while (<condition does not hold>)<br>             obj.wait(timeout);<br>         … // Perform action appropriate to condition<br>     } </p>
</blockquote>
<p>简单来说，把if换成while 问题解决。</p>
<p>​    </p>
<h3 id="Lock版本"><a href="#Lock版本" class="headerlink" title="Lock版本"></a>Lock版本</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">//TODO Lock</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPCFinal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Shop shop = <span class="keyword">new</span> Shop();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) shop.buy();</span><br><span class="line">        &#125;, <span class="string">&quot;customer&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) shop.sale();</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shop</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> chicken = <span class="number">10</span>;</span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (chicken != <span class="number">0</span>) &#123;</span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;厨房正在做&quot;</span>);</span><br><span class="line">            chicken++;</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (chicken == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;没有买到鸡&quot;</span>);</span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;买到了一只鸡&quot;</span> + <span class="string">&quot;目前还剩&quot;</span> + (chicken - <span class="number">1</span>));</span><br><span class="line">            chicken--;</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>JUC的优势是可以指定线程执行，在以后的案例中会讲到，其他方面大体与synchronized相同。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>银行取款问题（非线程安全问题）</title>
    <url>/2020/07/27/%E5%A4%9A%E7%BA%BF%E7%A8%8B----%E9%93%B6%E8%A1%8C%E5%8F%96%E6%AC%BE%E9%97%AE%E9%A2%98%EF%BC%88%E9%9D%9E%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%EF%BC%89/</url>
    <content><![CDATA[<h1 id="银行取款问题（非线程安全问题）"><a href="#银行取款问题（非线程安全问题）" class="headerlink" title="银行取款问题（非线程安全问题）"></a>银行取款问题（非线程安全问题）</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>张三在银行存了10000元钱，突发奇想，让两个人在柜台和ATM同时取出6000元（完全相同时间），能得到12000元吗？</p>
<h2 id="简易辣鸡银行交互系统"><a href="#简易辣鸡银行交互系统" class="headerlink" title="简易辣鸡银行交互系统"></a>简易辣鸡银行交互系统</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBank</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cash;</span><br><span class="line">    <span class="keyword">private</span> Bank bank;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnsafeBank</span><span class="params">(<span class="keyword">int</span> cash, Bank bank)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cash = cash;</span><br><span class="line">        <span class="keyword">this</span>.bank = bank;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cash&gt;bank.money)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;想要取走&quot;</span>+bank.name+<span class="string">&quot;的&quot;</span>+cash+<span class="string">&quot;元&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;超出取款数量&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(bank.name+<span class="string">&quot;的钱被&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;取走&quot;</span>+cash+<span class="string">&quot;元&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> sum=bank.money-cash;</span><br><span class="line">            bank.money=sum;</span><br><span class="line">            System.out.println(<span class="string">&quot;余额&quot;</span>+sum);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Bank bank = <span class="keyword">new</span> Bank(<span class="number">10000</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        UnsafeBank unsafeBank = <span class="keyword">new</span> UnsafeBank(<span class="number">6000</span>,bank);</span><br><span class="line">        UnsafeBank unsafeBank1 = <span class="keyword">new</span> UnsafeBank(<span class="number">5000</span>,bank);</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(unsafeBank,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(unsafeBank1,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        thread1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> money;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bank</span><span class="params">(<span class="keyword">int</span> money, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>由于线程不安全，在不加线程休眠的状况下，可能出现以下问题。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200727145836924.png" alt="image-20200727145836924"></p>
<p>因为两个线程同时进行，进入银行时，账户上都显示有10000元，所以ATM和支付宝上各得到6000和5000元，但实际情况肯定是不允许的。</p>
<p>当加入线程休眠后</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>thread运行一秒后，thread1才开始运行，由于计算速度非常快，足够更新账户余额。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200727150136654.png" alt="image-20200727150136654"></p>
<p>新的问题 当有大量线程操作时，线程休眠间隔调为多少才合适，1秒会不会浪费大量时间，1毫秒会不会时间不够？</p>
<h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p>线程同步的出现解决了上述的问题</p>
<p>synchronized可以作用在类或者代码块中，当用在类中锁的是类本身，放在代码块中可以锁任意属性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (bank) &#123;</span><br><span class="line">    <span class="keyword">if</span> (cash &gt; bank.money) &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;想要取走&quot;</span> + bank.name + <span class="string">&quot;的&quot;</span> + cash + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;超出取款数量&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(bank.name + <span class="string">&quot;的钱被&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;取走&quot;</span> + cash + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> sum = bank.money - cash; </span><br><span class="line">        bank.money = sum;</span><br><span class="line">        System.out.println(<span class="string">&quot;余额&quot;</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200727152430381.png" alt="image-20200727152430381"></p>
<p>问题解决。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>龟兔赛跑-实现Runnable接口</title>
    <url>/2020/07/27/%E9%BE%9F%E5%85%94%E8%B5%9B%E8%B7%91-%E5%AE%9E%E7%8E%B0Runnable%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h1 id="龟兔赛跑-实现Runnable接口"><a href="#龟兔赛跑-实现Runnable接口" class="headerlink" title="龟兔赛跑-实现Runnable接口"></a>龟兔赛跑-实现Runnable接口</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitTortoise</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String winner;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> road = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">while</span> (winner == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (road &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                winner = Thread.currentThread().getName();</span><br><span class="line">                System.out.println(winner + <span class="string">&quot;获得了胜利&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Thread.currentThread().getName() == <span class="string">&quot;Rabbit&quot;</span> &amp;&amp; road == <span class="number">20</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;距终点&quot;</span> + road-- + <span class="string">&quot;米&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RabbitTortoise rabbitTortoise = <span class="keyword">new</span> RabbitTortoise();</span><br><span class="line">        <span class="keyword">new</span> Thread(rabbitTortoise, <span class="string">&quot;Rabbit&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(rabbitTortoise, <span class="string">&quot;Tortoise&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>详解多线程</title>
    <url>/2020/07/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><p>java.thread</p>
<h2 id="四种实现方法"><a href="#四种实现方法" class="headerlink" title="四种实现方法"></a>四种实现方法</h2><ul>
<li>继承Thread类</li>
<li>实现Runnable接口</li>
<li>实现Callable接口</li>
<li>使用线程池创建</li>
</ul>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="线程使用"><a href="#线程使用" class="headerlink" title="线程使用"></a>线程使用</h3><p>练习一：多线程下载图片（导入commons-io包）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTestD</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadTestD</span><span class="params">(String url, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DownloadPic downloadPic = <span class="keyword">new</span> DownloadPic();</span><br><span class="line">        downloadPic.DownloadPic(url,name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadTestD threadTestD = <span class="keyword">new</span> ThreadTestD(<span class="string">&quot;https://www.baidu.com/img/flexible/logo/pc/result.png&quot;</span>, <span class="string">&quot;百度test&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(threadTestD).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写一个下载类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DownloadPic</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DownloadPic</span><span class="params">(String url, String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url), <span class="keyword">new</span> File(name));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;已下载名为&quot;</span> + name + <span class="string">&quot;的图片&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>练习二：线程不安全的案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Security</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tickets = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Security security = <span class="keyword">new</span> Security();</span><br><span class="line">        <span class="keyword">new</span> Thread(security,<span class="string">&quot;sssssssssssssssssss&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(security,<span class="string">&quot;wwwwww&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(security,<span class="string">&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (tickets&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;抢到了第&quot;</span> + tickets-- + <span class="string">&quot;张票。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>练习三：用Runnable实现龟兔赛跑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitTortoise</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String winner;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> road = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">while</span> (winner == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (road &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                winner = Thread.currentThread().getName();</span><br><span class="line">                System.out.println(winner + <span class="string">&quot;获得了胜利&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Thread.currentThread().getName() == <span class="string">&quot;Rabbit&quot;</span> &amp;&amp; road == <span class="number">20</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;距终点&quot;</span> + road-- + <span class="string">&quot;米&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RabbitTortoise rabbitTortoise = <span class="keyword">new</span> RabbitTortoise();</span><br><span class="line">        <span class="keyword">new</span> Thread(rabbitTortoise, <span class="string">&quot;Rabbit&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(rabbitTortoise, <span class="string">&quot;Tortoise&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="线程停止"><a href="#线程停止" class="headerlink" title="线程停止"></a>线程停止</h3><p>不建议使用JDK自带的api，已废除。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"><span class="comment">//正常停止，利用次数，不建议死循环</span></span><br><span class="line"><span class="comment">//建立标志位</span></span><br><span class="line"><span class="comment">//不要使用stop或者destroy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStop</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//建立标识位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            System.out.println(i++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置一个公开的方法停止线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestStop testStop = <span class="keyword">new</span> TestStop();</span><br><span class="line">        <span class="keyword">new</span> Thread(testStop).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">900</span>)&#123;</span><br><span class="line">                testStop.stop();</span><br><span class="line">                System.out.println(<span class="string">&quot;线程已停&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h3><p>练习一：倒计时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSleep1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">1</span>);</span><br><span class="line">        service.execute(<span class="keyword">new</span> TestSleep1());</span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">10</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>联系二：当前时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟倒计时</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSleep</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tenDown</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(num--);</span><br><span class="line">            <span class="keyword">if</span> (num&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Date startTime = <span class="keyword">new</span> Date(System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;HH:mm:ss&quot;</span>).format(startTime));</span><br><span class="line">            startTime = <span class="keyword">new</span> Date(System.currentTimeMillis());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h3><p><code>Thread.yield();</code> 鸡肋方法，有可能成功，也有可能失败。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (Thread.activeCount()&gt;<span class="number">2</span>)&#123;</span><br><span class="line">    Thread.yield();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>较常用，当线程数大于2（mian，gc）时，线程礼让</p>
<h3 id="线程插队"><a href="#线程插队" class="headerlink" title="线程插队"></a>线程插队</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.awt.windows.ThemeReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">//join 插队</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJoin</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;vip来了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TestJoin testJoin = <span class="keyword">new</span> TestJoin();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(testJoin);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">300</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">200</span>)&#123;</span><br><span class="line">                thread.join();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h3><p>六种状态：NEW 新生；RUNNABLE 运行；BLOCKED 阻塞；WAITING 等待；TIMED_WAITING 超时等待；TERMINATED 终止；</p>
<p>练习一：观察线程状态</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"><span class="comment">//观察测试线程状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStatus</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">5</span> ; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    Thread.currentThread().join(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread.State state = thread.getState();</span><br><span class="line">        System.out.println(state);</span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line">        state = thread.getState();</span><br><span class="line">        System.out.println(state);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(state!= Thread.State.TERMINATED)&#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            state = thread.getState();</span><br><span class="line">            System.out.println(state);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><p>注：优先级大的不一定先跑，但权重会变大</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">t1.setPriority(<span class="number">3</span>);<span class="comment">//线程优先级为1-10 </span></span><br><span class="line">t1.start();</span><br></pre></td></tr></table></figure>

<h3 id="线程守护"><a href="#线程守护" class="headerlink" title="线程守护"></a>线程守护</h3><p>gc线程就是main线程的守护线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDaemon</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Youself youself = <span class="keyword">new</span> Youself();</span><br><span class="line">        God god = <span class="keyword">new</span> God();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(god);</span><br><span class="line">        thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">new</span> Thread(youself).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">God</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;上帝保佑着你&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Youself</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">36500</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你一直开心的活着&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;dead&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><p>队列加锁解决线程的安全性</p>
<h3 id="性能倒置"><a href="#性能倒置" class="headerlink" title="性能倒置"></a>性能倒置</h3><p>优先级高的线程因为某些原因在优先级低的线程先运行，称为性能倒置。</p>
<h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><p>练习一：银行取款问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBank</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cash;</span><br><span class="line">    <span class="keyword">private</span> Bank bank;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnsafeBank</span><span class="params">(<span class="keyword">int</span> cash, Bank bank)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cash = cash;</span><br><span class="line">        <span class="keyword">this</span>.bank = bank;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (bank) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cash &gt; bank.money) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;想要取走&quot;</span> + bank.name + <span class="string">&quot;的&quot;</span> + cash + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;超出取款数量&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(bank.name + <span class="string">&quot;的钱被&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;取走&quot;</span> + cash + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> sum = bank.money - cash;</span><br><span class="line">                bank.money = sum;</span><br><span class="line">                System.out.println(<span class="string">&quot;余额&quot;</span> + sum);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Bank bank = <span class="keyword">new</span> Bank(<span class="number">10000</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        UnsafeBank unsafeBank = <span class="keyword">new</span> UnsafeBank(<span class="number">6000</span>, bank);</span><br><span class="line">        UnsafeBank unsafeBank1 = <span class="keyword">new</span> UnsafeBank(<span class="number">5000</span>, bank);</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(unsafeBank, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(unsafeBank1, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            Thread.sleep(1000);</span></span><br><span class="line"><span class="comment">//        &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        thread1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> money;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bank</span><span class="params">(<span class="keyword">int</span> money, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="线程同步-1"><a href="#线程同步-1" class="headerlink" title="线程同步"></a>线程同步</h3><p>线程同步的出现解决了上述的问题</p>
<p>synchronized可以作用在类或者代码块中，当用在类中锁的是类本身，放在代码块中可以锁任意属性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (bank) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cash &gt; bank.money) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;想要取走&quot;</span> + bank.name + <span class="string">&quot;的&quot;</span> + cash + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;超出取款数量&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(bank.name + <span class="string">&quot;的钱被&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;取走&quot;</span> + cash + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> sum = bank.money - cash;</span><br><span class="line">                bank.money = sum;</span><br><span class="line">                System.out.println(<span class="string">&quot;余额&quot;</span> + sum);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="线程死锁"><a href="#线程死锁" class="headerlink" title="线程死锁"></a>线程死锁</h3><p>当某些资源A，B一次只能被一个进程使用，一个进程请求A资源且保持不放且接下来要请求B资源，另一进程请求B资源且接下来要请求A资源，造成了线程的死锁。</p>
<p>练习一死锁：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPlus</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestPlus</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestPlus testPlus = <span class="keyword">new</span> TestPlus(<span class="keyword">true</span>);</span><br><span class="line">        TestPlus testPlus1 = <span class="keyword">new</span> TestPlus(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(testPlus).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(testPlus1).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Drawer drawer = <span class="keyword">new</span> Drawer();</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (drawer.ruler) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;拿到ruler1了&quot;</span>);</span><br><span class="line">                    <span class="keyword">synchronized</span> (drawer.pen) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;拿到pen2了&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (drawer.pen) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;拿到pen了1&quot;</span>);</span><br><span class="line">                    <span class="keyword">synchronized</span> (drawer.ruler) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;拿到ruler了2&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Drawer</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> Object ruler = <span class="keyword">new</span> Object();</span><br><span class="line">        <span class="keyword">static</span> Object pen = <span class="keyword">new</span> Object();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h3><ul>
<li><p>什么是锁，如何判断锁的对象是谁</p>
<p>当在方法中加static时，锁的是这个方法所在的类。</p>
<p>举例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时锁的是Phone.class 且规定只能有一个Phone.class </p>
<hr>
<p>当方法中没有static时，锁的是这个方法的调用者，举例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLockAll</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此时锁的是Phone phone = new Phone()中的phone。 </p>
</li>
</ul>
<p>跟synchronized基本相同，需要打开和关闭。</p>
<p>lock.lock(); 打开锁</p>
<p>lock.trylock();尝试获取锁</p>
<p>lock.unlock();关闭锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Tic tic = <span class="keyword">new</span> Tic();</span><br><span class="line">        <span class="keyword">new</span> Thread(tic).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(tic).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(tic).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tic</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tickets = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock(); </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    Thread.sleep(1000);</span></span><br><span class="line"><span class="comment">//                &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                <span class="keyword">if</span> (tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(tickets--);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Lock锁与synchronized对比</strong></p>
<p>Lock只能锁代码块，synchronized不仅能锁代码块还可以锁方法。</p>
<p>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且有很多子类，根据扩展性。</p>
<p>优先使用顺序：Lock&gt;synchronize</p>
<ul>
<li><p>使用Lock锁+Condition实现指定线程运行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLockCondition</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Start s = <span class="keyword">new</span> Start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) s.A();</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) s.B();</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) s.C();</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> Condition condition1 = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> Condition condition2 = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> Condition condition3 = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">A</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (x != <span class="number">1</span>) &#123;</span><br><span class="line">                condition1.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;A在运行&quot;</span>);</span><br><span class="line">            x = <span class="number">2</span>;</span><br><span class="line">            condition2.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">B</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (x != <span class="number">2</span>) &#123;</span><br><span class="line">                condition2.await();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;B在运行&quot;</span>);</span><br><span class="line">            x = <span class="number">3</span>;</span><br><span class="line">            condition3.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">C</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (x != <span class="number">3</span>) &#123;</span><br><span class="line">                condition3.await();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;C在运行&quot;</span>);</span><br><span class="line">            x = <span class="number">1</span>;</span><br><span class="line">            condition1.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="线程协作（wait和sleep的区别）"><a href="#线程协作（wait和sleep的区别）" class="headerlink" title="线程协作（wait和sleep的区别）"></a>线程协作（wait和sleep的区别）</h3><p>wait和sleep的区别</p>
<p>wait线程时会释放锁sleep线程时不会释放</p>
<p>wait 来自Object类，sleep来自Thread类</p>
<p>wait必须在同步代码块中使用，sleep可以在任何地方用</p>
<p>wait老版本不需要捕获异常，sleep必须捕获异常</p>
<p><strong>企业中一般使用java.util.concurrent.TimeUnit包中的TimeUnit.DAYS.sleep();</strong></p>
<h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h2><p>什么是JUC</p>
<p>java util Concurrent </p>
<h3 id="线程和进程"><a href="#线程和进程" class="headerlink" title="线程和进程"></a>线程和进程</h3><p>进程：程序的集合。</p>
<p>线程：</p>
<p>Java真的可以开启线程吗？</p>
<p>不可以，只能通过本地方法（native）去调用，使用的是c++操作，java运行在虚拟机中，无法直接操作。</p>
<h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><p>并发：多线程操作同一个资源。（单核cpu，模拟出来多条线程，线程之间快速交替运行，模拟同时运行）</p>
<p>并行：多个人一起行走。（多核cpu，多个线程可以同时执行）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查看cpu核数</span></span><br><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCore</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Runtime.getRuntime().availableProcessors());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>并发编程的目的：充分利用cpu的资源。</p>
<h3 id="集合类不安全"><a href="#集合类不安全" class="headerlink" title="集合类不安全"></a>集合类不安全</h3><blockquote>
<p>List</p>
</blockquote>
<p>通过源码可知：List下的add方法是没有加synchronized的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                list.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当线程数多的时候，会报java.util.ConcurrentModificationException异常(并发修改异常)。</p>
<p>解决方法：</p>
<ul>
<li><p>List<String> list = new ArrayList&lt;&gt;();替换为List<String> list = new Vector&lt;&gt;();</p>
<p>因为Vector底层的add方法是加了synchronized锁的。</p>
</li>
<li><p>List<String> list = new ArrayList&lt;&gt;();替换为List<String> list = Collections.synchronizedList(new ArrayList&lt;&gt;());</p>
</li>
<li><p>（JUC）List<String> list = new ArrayList&lt;&gt;();替换为<strong>List<String>  list = new CopyOnWriteArrayList&lt;&gt;();</strong></p>
<p>顾名思义，就是在写的过程中，先copy已经存在的数组，然后在这个新数组中添加需要添加的元素，再将这个新数组去替换旧数组。读写分离</p>
</li>
</ul>
<blockquote>
<p>set</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArraySet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Set&lt;String&gt; set = new HashSet&lt;&gt;();</span></span><br><span class="line">        <span class="comment">//Set&lt;String&gt; set = Collections.synchronizedSet(new HashSet&lt;&gt;());</span></span><br><span class="line">        Set&lt;String&gt; set =<span class="keyword">new</span> CopyOnWriteArraySet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">101</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                set.add(UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">5</span>));</span><br><span class="line">                System.out.println(set);</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>HashSet的底层：</p>
<p>底层就是HashMap</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//add set 本质就是map key不能重复。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure>

<p>因为set list同属Collections下，所以修改方法几乎完全相同。</p>
<blockquote>
<p>Map</p>
</blockquote>
<p>Map也会遇到同样的问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//HashMap&lt;String, String&gt; map = new HashMap&lt;&gt;();</span></span><br><span class="line">        <span class="comment">//Map&lt;Object, Object&gt; map = Collections.synchronizedMap(new HashMap&lt;&gt;());</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                map.put(Thread.currentThread().getName(), UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">3</span>));</span><br><span class="line">                System.out.println(map);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>除了Collections以外，在JUC中给出了ConcurrentHashMap&lt;&gt;();也能解决多线程问题。</p>
<p><strong>TODO ConcurrentHashMap原理：</strong></p>
<h3 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCallable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        MyCall myCall = <span class="keyword">new</span> MyCall();</span><br><span class="line">        FutureTask futureTask = <span class="keyword">new</span> FutureTask(myCall);</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(futureTask);</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(futureTask);</span><br><span class="line">        thread.start();</span><br><span class="line">        thread1.start();</span><br><span class="line"></span><br><span class="line">        String s = (String) futureTask.get();</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCall</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;call method&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1024&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200729125023763.png" alt="image-20200729125023763"></p>
<p>由上面案例及底层源码可知，Thread的重载方法中必须放入Runnable，但实现callable接口中传入的是call方法，所以需要中间件 FutureTask；</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200729125517545.png" alt="image-20200729125517545"></p>
<p>FutureTask本质就是将callable转化为runnable，所以将futureTask直接放入Thread中就可正常运行，且Callable是有返回值的，通过</p>
<p>futureTask.get()就能拿到返回值了。</p>
<p>且Callable有缓存，结果可能需要等待，会阻塞。</p>
<h3 id="常用的辅助类"><a href="#常用的辅助类" class="headerlink" title="常用的辅助类"></a>常用的辅助类</h3><p>CountDownLatch</p>
<p>减法计数器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        CountDownLatch count = <span class="keyword">new</span> CountDownLatch(<span class="number">6</span>);<span class="comment">//一共有六个数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                count.countDown();<span class="comment">//数量-1</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;走了&quot;</span>);</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        count.await();<span class="comment">//当计数器归零时，执行下面操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;over&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>CyclicBarrier</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BrokenBarrierException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">7</span>,()-&gt; System.out.println(<span class="string">&quot;召唤&quot;</span>));<span class="comment">//当有七个线程执行时，执行lambda表达式（Runnable）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> temp = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+temp);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    cyclicBarrier.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Semaphore</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//线程数量:停车位</span></span><br><span class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="comment">//acquire 得到</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;抢到车位&quot;</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;离开车位&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//释放</span></span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>Semaphore semaphore = new Semaphore(3);</code> 信号量为3</p>
<p><code>semaphore.acquire();</code> 信号量-1 当信号量小于1时，等待信号量被释放。</p>
<p><code>semaphore.release();</code> 信号量+1 使其他线程可以运行，唤醒等待的线程。</p>
<p>作用：多个共享资源互斥的使用，控制最大的线程数。</p>
<h3 id="ReadWriteLock"><a href="#ReadWriteLock" class="headerlink" title="ReadWriteLock"></a>ReadWriteLock</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line">;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReadWriteLock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadWriteLockDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyCache myCache = <span class="keyword">new</span> MyCache();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写入</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> temp = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                myCache.put(temp + <span class="string">&quot;&quot;</span>, temp + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> temp = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                myCache.get(temp + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//读写锁 更加细粒度的控制</span></span><br><span class="line">    <span class="keyword">private</span> ReentrantReadWriteLock reentrantReadWriteLock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写的时候只有一个线程写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        reentrantReadWriteLock.writeLock().lock();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;写入&quot;</span> + key);</span><br><span class="line">            map.put(key, value);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;写入ok&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            reentrantReadWriteLock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读的时候所有人都可以读</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        reentrantReadWriteLock.readLock().lock();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;读取&quot;</span> + key);</span><br><span class="line">            Object o = map.get(key);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;读取ok&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            reentrantReadWriteLock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//class MyCache&#123;</span></span><br><span class="line"><span class="comment">//无锁 线程混乱</span></span><br><span class="line"><span class="comment">//    private volatile Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">//    public void put(String key,Object value)&#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(Thread.currentThread().getName()+&quot;写入&quot;+key);</span></span><br><span class="line"><span class="comment">//        map.put(key,value);</span></span><br><span class="line"><span class="comment">//        System.out.println(Thread.currentThread().getName()+&quot;写入ok&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    public void get(String key)&#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(Thread.currentThread().getName()+&quot;读取&quot;+key);</span></span><br><span class="line"><span class="comment">//        Object o = map.get(key);</span></span><br><span class="line"><span class="comment">//        System.out.println(Thread.currentThread().getName()+&quot;读取ok&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>

<p>独占锁（写锁）：一次只能被一个线程占有。</p>
<p>共享锁（读锁）：多个线程可以同时占有。 </p>
<h3 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h3><p>队列：FIFO（first input first output）</p>
<p>阻塞：当队列为空时，发生阻塞。</p>
<p><strong>队列的四组api</strong></p>
<ul>
<li>抛出异常</li>
<li>不抛出异常</li>
<li>阻塞等待</li>
<li>超时等待</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueApi</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Test4();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//抛出异常</span></span><br><span class="line">    <span class="comment">//arrayBlockingQueue.element() 查看队列首部</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//队列的大小</span></span><br><span class="line">        ArrayBlockingQueue arrayBlockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        System.out.println(arrayBlockingQueue.add(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">        System.out.println(arrayBlockingQueue.add(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">        System.out.println(arrayBlockingQueue.add(<span class="string">&quot;c&quot;</span>));</span><br><span class="line">        <span class="comment">//队列数为3 当添加第四个元素时抛出异常</span></span><br><span class="line">        <span class="comment">//System.out.println(arrayBlockingQueue.add(&quot;d&quot;));</span></span><br><span class="line">        System.out.println(arrayBlockingQueue.remove());</span><br><span class="line">        System.out.println(arrayBlockingQueue.remove());</span><br><span class="line">        System.out.println(arrayBlockingQueue.remove());</span><br><span class="line">        <span class="comment">//取出第四个元素（不存在），抛出异常</span></span><br><span class="line">        <span class="comment">//System.out.println(arrayBlockingQueue.remove());</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不抛出异常</span></span><br><span class="line">    <span class="comment">//arrayBlockingQueue.peek() 查看队列首部</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayBlockingQueue arrayBlockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        System.out.println(arrayBlockingQueue.offer(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">        System.out.println(arrayBlockingQueue.offer(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">        System.out.println(arrayBlockingQueue.offer(<span class="string">&quot;c&quot;</span>));</span><br><span class="line">        <span class="comment">//false</span></span><br><span class="line">        System.out.println(arrayBlockingQueue.offer(<span class="string">&quot;d&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(arrayBlockingQueue.poll());</span><br><span class="line">        System.out.println(arrayBlockingQueue.poll());</span><br><span class="line">        System.out.println(arrayBlockingQueue.poll());</span><br><span class="line">        <span class="comment">//null</span></span><br><span class="line">        System.out.println(arrayBlockingQueue.poll());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//等待，阻塞（一直）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ArrayBlockingQueue&lt;Object&gt; arrayBlockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        arrayBlockingQueue.put(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        arrayBlockingQueue.put(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        arrayBlockingQueue.put(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        <span class="comment">//队列没有位置，造成一直等待。</span></span><br><span class="line">        arrayBlockingQueue.put(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        System.out.println(arrayBlockingQueue.take());</span><br><span class="line">        System.out.println(arrayBlockingQueue.take());</span><br><span class="line">        System.out.println(arrayBlockingQueue.take());</span><br><span class="line">        <span class="comment">//没有数据，一直等待阻塞。</span></span><br><span class="line">        System.out.println(arrayBlockingQueue.take());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//等待，超时</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test4</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ArrayBlockingQueue arrayBlockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        arrayBlockingQueue.offer(<span class="string">&quot;a&quot;</span>,<span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">        arrayBlockingQueue.offer(<span class="string">&quot;c&quot;</span>,<span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">        arrayBlockingQueue.offer(<span class="string">&quot;b&quot;</span>,<span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">//等待1s 就退出</span></span><br><span class="line">        arrayBlockingQueue.offer(<span class="string">&quot;d&quot;</span>,<span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        System.out.println(arrayBlockingQueue.poll(<span class="number">2</span>, TimeUnit.SECONDS));</span><br><span class="line">        System.out.println(arrayBlockingQueue.poll(<span class="number">2</span>, TimeUnit.SECONDS));</span><br><span class="line">        System.out.println(arrayBlockingQueue.poll(<span class="number">2</span>, TimeUnit.SECONDS));</span><br><span class="line">        <span class="comment">//等待1s 就退出</span></span><br><span class="line">        System.out.println(arrayBlockingQueue.poll(<span class="number">2</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="同步队列"><a href="#同步队列" class="headerlink" title="同步队列"></a>同步队列</h3><p>SynchronizedQueue</p>
<p>进去一个元素，必须等待出来之后，才能再放入一个元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.SynchronousQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedQueueDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BlockingQueue&lt;String&gt; blockingDeque = <span class="keyword">new</span> SynchronousQueue&lt;&gt;();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;put 1&quot;</span>);</span><br><span class="line">                blockingDeque.put(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;put 2&quot;</span>);</span><br><span class="line">                blockingDeque.put(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;put 3&quot;</span>);</span><br><span class="line">                blockingDeque.put(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;take 1&quot;</span>);</span><br><span class="line">                blockingDeque.take();</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;take 2&quot;</span>);</span><br><span class="line">                blockingDeque.take();</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;take 3&quot;</span>);</span><br><span class="line">                blockingDeque.take();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Thread-0put 1</span></span><br><span class="line"><span class="comment">Thread-1take 1</span></span><br><span class="line"><span class="comment">Thread-0put 2</span></span><br><span class="line"><span class="comment">Thread-1take 2</span></span><br><span class="line"><span class="comment">Thread-0put 3</span></span><br><span class="line"><span class="comment">Thread-1take 3</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>只有put-take完一次以后才能进行下一次put，不能同时写入，类似信号量。</p>
<h3 id="线程池-1"><a href="#线程池-1" class="headerlink" title="线程池"></a>线程池</h3><p>优点：线程复用、可以控制最大并发数，管理线程。</p>
<p>三种创建线程池方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.woongcha;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Executors 工具类</span><br><span class="line">&#x2F;&#x2F;三大方法</span><br><span class="line">&#x2F;&#x2F;使用线程池--&gt;使用线程池创建</span><br><span class="line">public class TestPool01 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;        ExecutorService threadPool &#x3D; Executors.newSingleThreadExecutor();&#x2F;&#x2F;单个线程</span><br><span class="line">&#x2F;&#x2F;        ExecutorService threadPool &#x3D; Executors.newFixedThreadPool(5);&#x2F;&#x2F;固定线程池大小</span><br><span class="line">        ExecutorService threadPool &#x3D; Executors.newCachedThreadPool();&#x2F;&#x2F;可伸缩线程池</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            for (int i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line"></span><br><span class="line">                threadPool.execute(()-&gt;&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+&quot;ok&quot;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;线程池用完需关闭</span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>三种线程池的创建本质都是new ThreadPoolExecutor </p>
<p>ThreadPoolExecutor 源码分析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Creates a new &#123;<span class="doctag">@code</span> ThreadPoolExecutor&#125; with the given initial</span></span><br><span class="line"><span class="comment">    * parameters.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</span></span><br><span class="line"><span class="comment">    *        if they are idle, unless &#123;<span class="doctag">@code</span> allowCoreThreadTimeOut&#125; is set</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> maximumPoolSize the maximum number of threads to allow in the</span></span><br><span class="line"><span class="comment">    *        pool</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> keepAliveTime when the number of threads is greater than</span></span><br><span class="line"><span class="comment">    *        the core, this is the maximum time that excess idle threads</span></span><br><span class="line"><span class="comment">    *        will wait for new tasks before terminating.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> unit the time unit for the &#123;<span class="doctag">@code</span> keepAliveTime&#125; argument</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> workQueue the queue to use for holding tasks before they are</span></span><br><span class="line"><span class="comment">    *        executed.  This queue will hold only the &#123;<span class="doctag">@code</span> Runnable&#125;</span></span><br><span class="line"><span class="comment">    *        tasks submitted by the &#123;<span class="doctag">@code</span> execute&#125; method.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> threadFactory the factory to use when the executor</span></span><br><span class="line"><span class="comment">    *        creates a new thread</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> handler the handler to use when execution is blocked</span></span><br><span class="line"><span class="comment">    *        because the thread bounds and queue capacities are reached</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt; corePoolSize&#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> workQueue&#125;</span></span><br><span class="line"><span class="comment">    *         or &#123;<span class="doctag">@code</span> threadFactory&#125; or &#123;<span class="doctag">@code</span> handler&#125; is null</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                             TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                             BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                             ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                             RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">           maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">           maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">           keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">       <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">       <span class="keyword">this</span>.acc = System.getSecurityManager() == <span class="keyword">null</span> ?</span><br><span class="line">               <span class="keyword">null</span> :</span><br><span class="line">               AccessController.getContext();</span><br><span class="line">       <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">       <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">       <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">       <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">       <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">       <span class="keyword">this</span>.handler = handler;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200802194933646.png" alt="image-20200802194933646" style="zoom:50%;" />

<p><strong>手写线程池</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingDeque;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPoolDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//七个参数 1.核心大小 2.最大线程数 3.超时等待 4.超时等待单位 5.队列（候客区）6.ThreadFactory 线程工厂 7.拒绝策略(有四种)</span></span><br><span class="line">        <span class="comment">//自定义线程池</span></span><br><span class="line">        ThreadPoolExecutor threadPool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,</span><br><span class="line">                TimeUnit.SECONDS,<span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;(<span class="number">3</span>), Executors.defaultThreadFactory(),<span class="keyword">new</span> ThreadPoolExecutor.DiscardOldestPolicy());</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">              threadPool.execute(()-&gt;&#123;</span><br><span class="line">                  System.out.println(Thread.currentThread().getName()+<span class="string">&quot;运行&quot;</span>);</span><br><span class="line">              &#125;);</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">          threadPool.shutdown();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>四种拒绝策略</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>最大线程数如何确定？</strong></p>
<p>CPU密集型：几核CPU就填多少，可以保证CPU效率最高。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().availableProcessors()</span><br></pre></td></tr></table></figure>

<p>IO密集型：判断程序中比较耗IO的线程，一般设置为这个值线程的2倍。</p>
<p>例如程序中有5个线程耗时特别长，则设置最大线程数为10。</p>
<h3 id="ForkJoin"><a href="#ForkJoin" class="headerlink" title="ForkJoin"></a>ForkJoin</h3><p>ForkJoin是java1.7新特性,在庞大的数据量下，并行执行任务，提高效率。</p>
<p>MapReduce （把大任务拆分成子任务）</p>
<img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200802203906990.png" alt="image-20200802203906990" style="zoom:50%;" />

<p>ForkJoin特点：工作窃取，即当有n个线程同时运行时，其中一条线程的内容执行完毕，就可以偷过来其他线程没有执行的任务，达到提高总效率的目的。（双端队列）</p>
<p>如何使用ForkJoin？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ForkJoinPool;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ForkJoinTask;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.RecursiveTask;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.LongStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求和计算</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinTest</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long start;</span><br><span class="line">    <span class="keyword">private</span> Long end;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForkJoinTest</span><span class="params">(Long start, Long end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long temp = <span class="number">10000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> s1 = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        ForkJoinPool forkJoinPool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">        ForkJoinTest forkJoinTest = <span class="keyword">new</span> ForkJoinTest(<span class="number">1L</span>,<span class="number">10_0000_0000L</span>);</span><br><span class="line">        ForkJoinTask&lt;Long&gt; submit = forkJoinPool.submit(forkJoinTest);</span><br><span class="line">        Long aLong = submit.get();</span><br><span class="line">        System.out.println(aLong);</span><br><span class="line">        <span class="keyword">long</span> s2 = System.currentTimeMillis();</span><br><span class="line">        System.out.println(s2-s1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Long <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (end - start &lt; temp) &#123;</span><br><span class="line">            Long sum = <span class="number">0L</span>;</span><br><span class="line">            <span class="keyword">for</span> (Long i = start; i &lt;= end; i++) &#123;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> middle = (start+end)/<span class="number">2</span>;</span><br><span class="line">            ForkJoinTest forkJoinTest1 = <span class="keyword">new</span> ForkJoinTest(start, middle);</span><br><span class="line">            forkJoinTest1.fork();</span><br><span class="line">            ForkJoinTest forkJoinTest2 = <span class="keyword">new</span> ForkJoinTest(middle+<span class="number">1</span>, end);</span><br><span class="line">            forkJoinTest2.fork();</span><br><span class="line">            <span class="keyword">long</span> l = forkJoinTest1.join() + forkJoinTest2.join();</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h3><p>不懂</p>
<h3 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h3><p>什么是JMM</p>
<p>Java内存模型，实际上不存在</p>
<p>关于JMM同步的约定</p>
<ul>
<li>线程解锁前，必须把共享变量立刻刷回主存。</li>
<li>线程加锁前，必须读取主存中的最新值到工作内存中。</li>
<li>加锁和解锁是同一把锁。</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200803091307740.png" alt="image-20200803091307740"></p>
<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJMM</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (a==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;a=0&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;线程1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此时a虽然变成了1，但是线程1用的a是从主存复制到工作内存的a=0，所以线程不会停止。</span></span><br></pre></td></tr></table></figure>



<p>什么是Volatile？</p>
<p>关键字，时Java虚拟机提供的轻量级同步机制。</p>
<ul>
<li>保证可见性</li>
</ul>
<p>在上述代码中，private volatile static int a = 0; 对a添加volatile关键字，保证了a的可见性，使线程1也能得知a的变化。</p>
<ul>
<li>不保证原子性</li>
</ul>
<p>为了保证事物的原子性，且不使用synchronized和lock的情况下，使用Atomic保证事务的原子性，且提高效率。</p>
<p>使用原子类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAtomicInteger</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> AtomicInteger a= <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> s1 = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++) &#123;</span><br><span class="line">                    add();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (Thread.activeCount()&gt;<span class="number">2</span>)&#123;</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> s2 = System.currentTimeMillis();</span><br><span class="line">        System.out.println(s2-s1);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">            a.getAndIncrement();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//128</span></span><br><span class="line"><span class="comment">//1000000</span></span><br></pre></td></tr></table></figure>



<ul>
<li>禁止指令重排</li>
</ul>
<p>什么是指令重排？</p>
<p>在极小的概率下，两个线程操作同一个属性，使结果出现多种可能.</p>
<p>volatile可以避免指令重排：</p>
<p>什么是内存屏障？</p>
<p>大多数现代计算机为了提高性能而采取<a href="https://baike.baidu.com/item/%E4%B9%B1%E5%BA%8F%E6%89%A7%E8%A1%8C">乱序执行</a>，这使得内存屏障成为必须。</p>
<p>语义上，内存屏障之前的所有写操作都要写入内存；内存屏障之后的读操作都可以获得同步屏障之前的写操作的结果。因此，对于敏感的程序块，写操作之后、读操作之前可以插入内存屏障。</p>
<p>作用：</p>
<p>1 保证特定操作的执行顺序。</p>
<p>2 保证了某些变量的内存可见性。</p>
<img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200803105130261.png" alt="image-20200803105130261" style="zoom: 67%;" />

<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>饿汉式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"><span class="comment">//饿汉式单例</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHungrySingle</span> </span>&#123;</span><br><span class="line">    <span class="comment">//构造器私有,保证内存中只有一个对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">TestHungrySingle</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> TestHungrySingle TEST_HUNGRY_SINGLE = <span class="keyword">new</span> TestHungrySingle();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TestHungrySingle <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TEST_HUNGRY_SINGLE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>懒汉式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.management.LazyCompositeData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//懒汉式单例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLazySingle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">TestLazySingle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> TestLazySingle testLazySingle;</span><br><span class="line"><span class="comment">//双重检测锁模式 DCL懒汉式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TestLazySingle <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (testLazySingle == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (TestLazySingle.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (testLazySingle == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    testLazySingle = <span class="keyword">new</span> TestLazySingle();<span class="comment">//不是原子性操作</span></span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 分配内存空间</span></span><br><span class="line"><span class="comment">                     * 执行构造方法初始化对象</span></span><br><span class="line"><span class="comment">                     * 把对象指向空间</span></span><br><span class="line"><span class="comment">                     * 以上三部可能发生指令重排</span></span><br><span class="line"><span class="comment">                     * 加volatile防止指令重排</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> testLazySingle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多线程并发</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        TestLazySingle testLazySingle = TestLazySingle.getInstance();</span><br><span class="line">        Constructor&lt;TestLazySingle&gt; declaredConstructor = TestLazySingle.class.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">        declaredConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        TestLazySingle testLazySingle1 = declaredConstructor.newInstance();</span><br><span class="line">        System.out.println(testLazySingle);</span><br><span class="line">        System.out.println(testLazySingle1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>静态内部类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.ws.Holder;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态内部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHolder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">TestHolder</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TestHolder <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClass.TEST_HOLDER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> TestHolder TEST_HOLDER = <span class="keyword">new</span> TestHolder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>枚举</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="深入理解CAS"><a href="#深入理解CAS" class="headerlink" title="深入理解CAS"></a>深入理解CAS</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCAS</span> </span>&#123;</span><br><span class="line">    <span class="comment">//CAS=compareAndSet  // 比较并交换</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">2020</span>);</span><br><span class="line">        <span class="comment">//如果达到期望值--&gt;更新 否则不更新</span></span><br><span class="line">        <span class="comment">//如果expect = initialValue 更新</span></span><br><span class="line">        atomicInteger.compareAndSet(<span class="number">2020</span>,<span class="number">2019</span>);</span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2020</span>, <span class="number">2019</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p><strong>公平锁 非公平锁</strong></p>
<p>公平锁：非常公平，先来后到，不能插队。</p>
<p>非公平锁：可以插队（默认使用）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync = <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">    sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>可重入锁</strong></p>
<p>可重入锁=递归锁</p>
<p>拿到了外面的锁，就能拿到里面的锁。</p>
<img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200803170458105.png" alt="image-20200803170458105" style="zoom:50%;" />

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLockAll</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; phone.call(), <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; phone.call(), <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;call&quot;</span>);</span><br><span class="line">        sendSms();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;sendSms&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>理论上当线程A执行完call()的时候,线程B也可以执行call()了，但实际上A执行完call()后还要执行sendSms()。</p>
<p>Lock锁也会以上面的顺序运行。</p>
<p><strong>自旋锁</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自旋锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpinlock</span> </span>&#123;</span><br><span class="line">    AtomicReference&lt;Thread&gt; atomicReference = <span class="keyword">new</span> AtomicReference&lt;&gt;();</span><br><span class="line">    <span class="comment">//加锁</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread thread = Thread.currentThread();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;  myLock&quot;</span>);</span><br><span class="line">        <span class="comment">//自旋锁</span></span><br><span class="line">        <span class="keyword">while</span> (!atomicReference.compareAndSet(<span class="keyword">null</span>, thread)) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myUnlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread thread = Thread.currentThread();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;  myUnLock&quot;</span>);</span><br><span class="line">        atomicReference.compareAndSet(thread,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>排查死锁</strong></p>
<p>1 查看日志：</p>
<p><a href="https://jingyan.baidu.com/article/af9f5a2d4e7f9543140a45d5.html">https://jingyan.baidu.com/article/af9f5a2d4e7f9543140a45d5.html</a></p>
<p>2 堆栈信息方法：</p>
<p>使用jps定位进程号</p>
<img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200803175457047.png" alt="image-20200803175457047" style="zoom: 67%;" />

<img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200803175642532.png" alt="image-20200803175642532" style="zoom: 67%;" />

<img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200803175705553.png" alt="image-20200803175705553" style="zoom:67%;" />

<p>可以看到死锁的原因。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/2020/07/20/%E5%88%9D%E5%AD%A6Redis/</url>
    <content><![CDATA[<h1 id="初学Redis"><a href="#初学Redis" class="headerlink" title="初学Redis"></a>初学Redis</h1><p>Redis = Remote Dictionary Server 即远程字典服务</p>
<h3 id="Redis的读写速度"><a href="#Redis的读写速度" class="headerlink" title="Redis的读写速度"></a>Redis的读写速度</h3><p>读的速度是110000次/s,写的速度是81000次/s </p>
<h3 id="修改GCC版本"><a href="#修改GCC版本" class="headerlink" title="修改GCC版本"></a>修改GCC版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@emooco redis-6.0.6]<span class="comment"># yum -y install centos-release-scl</span></span><br><span class="line"></span><br><span class="line">[root@emooco redis-6.0.6]<span class="comment"># yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils</span></span><br><span class="line"></span><br><span class="line">[root@emooco redis-6.0.6]<span class="comment"># scl enable devtoolset-9 bash</span></span><br></pre></td></tr></table></figure>



<h3 id="为何Redis使用单线程？"><a href="#为何Redis使用单线程？" class="headerlink" title="为何Redis使用单线程？"></a>为何Redis使用单线程？</h3><p>读写速度：cpu&gt;内存&gt;硬盘</p>
<p>redis的所有数据都存放在内存中，多次读写都在一个cpu上，所以单线程效率最高，应用多线程会涉及到cpu的切换，也会浪费一定的时间。</p>
<p>在redis 6.0 以后的版本也可以使用多线程了，但默认是关闭的。</p>
<h3 id="Redis的默认数据库"><a href="#Redis的默认数据库" class="headerlink" title="Redis的默认数据库"></a>Redis的默认数据库</h3><p>Redis默认有16个数据库，在redis.conf中可以看到。</p>
<h3 id="如何开启Redis后台运行"><a href="#如何开启Redis后台运行" class="headerlink" title="如何开启Redis后台运行"></a>如何开启Redis后台运行</h3><p>在redis.conf中有daemonize no 改为yes</p>
<h3 id="如何进行Redis性能测试"><a href="#如何进行Redis性能测试" class="headerlink" title="如何进行Redis性能测试"></a>如何进行Redis性能测试</h3><p>redis-benchmark加指令，可以进行多种测试</p>
<h3 id="Redis常用指令"><a href="#Redis常用指令" class="headerlink" title="Redis常用指令"></a>Redis常用指令</h3><p>ping-pong</p>
<h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>get set</p>
<p>exists 是否存在key</p>
<p>flushdb 删除当前数据库所有内容</p>
<p>fllushall 删除所有数据库中的内容</p>
<p>keys * 显示所有的key</p>
<p>expire 设置过期时间</p>
<p>ttl 查看剩余时间</p>
<p>move 移除当前的key</p>
<p>type 查看key数据类型</p>
<p>append 追加值</p>
<p>strlen 获取k对应的v长度</p>
<p>incr v值增加1</p>
<p>decr v值减少1</p>
<p>incrby 自定义增加值</p>
<p>decrby 自定义减少值</p>
<p>getrange 截取字符串</p>
<p>setrange 修改指定位置内容</p>
<p>setex 设置k-v值以及过期时间</p>
<p>setnx 当key不存在时将v值赋给k</p>
<p>mset 批量设置k-v</p>
<p>set user:1 {name:zhangsan,age:12} 添加json格式数据</p>
<p>getset 如果存在值，先返回值再存入值，如果不存在 返回null 将输入值存入</p>
<h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><p>lpush 插入数据到列表头部</p>
<p>rpush 插入数据到列表尾部</p>
<p>lpop rpop 移除数据</p>
<p>lindex rindex 获取指定下标值</p>
<p>lrem 移除指定值</p>
<p>lrange 返回指定k-v</p>
<p>ltrim 截取部分k-v</p>
<p>rpoplpush 将最后一个值放入新列表中</p>
<p>linsert 指定位置插入</p>
<h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>sadd 向set中添加元素</p>
<p>SMEMBERS 查看指定set集合</p>
<p>SISMEMBER 判断集合中是否存在指定元素</p>
<p>scard 获取set集合中的内容个数</p>
<p>srem 移除指定值</p>
<p>SRANDMEMBER 随机从set中取出值</p>
<p>smove 将指定元素移到另一个set集合中</p>
<p>sdiff 取两个set的差集</p>
<p>sinter 取两个set的交集</p>
<p>sunion 取两个set的并集</p>
<h4 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h4><p>hset 添加hash键值对</p>
<p>hget 取出hash值</p>
<p>hdel  删除hash指定的k-v</p>
<p>hvals 显示所有的values</p>
<p>hkeys 显示所有的key</p>
<p>hexist 指定值是否存在</p>
<p>hsetnx 存在则不创建，不存在则创建</p>
<h4 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h4><p>zadd 添加内容到zset集合</p>
<p>ZRANGEBYSCORE zrevrange 按指定属性排序并输出</p>
<p>zrange 输出指定zset 指定属性</p>
<p>zcard 获取set集合中的内容个数</p>
<h4 id="geospatial"><a href="#geospatial" class="headerlink" title="geospatial"></a>geospatial</h4><p><strong>地理位置（本质为zset，所以可以用zset的指令）</strong></p>
<p>geoadd  添加某国家城市的经度纬度</p>
<p>geopos 获取指定测试经纬度</p>
<p>geodist 某两个坐标之间的距离</p>
<p>georadius 给出任意坐标 查询给定直线距离内的城市</p>
<p>GEORADIUSBYMEMBER 找出指定位置的范围内直线距离</p>
<h4 id="hyperloglog"><a href="#hyperloglog" class="headerlink" title="hyperloglog"></a>hyperloglog</h4><h4 id="本质为set，UV-unique-visitor-独立访问者"><a href="#本质为set，UV-unique-visitor-独立访问者" class="headerlink" title="(本质为set，UV unique visitor 独立访问者)"></a><strong>(本质为set，UV unique visitor 独立访问者)</strong></h4><p>用于计算页面的访问次数，单人多次访问只算一次</p>
<p>PFADD 添加数据</p>
<p>PFCOUNT 统计数据</p>
<p>PFMERGE 合并数据（基数合并 并集）</p>
<h4 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h4><h4 id="统计人数-统计信息-登陆未登录-打卡-二进制存储-只有0-1两个状态"><a href="#统计人数-统计信息-登陆未登录-打卡-二进制存储-只有0-1两个状态" class="headerlink" title="(统计人数/统计信息/登陆未登录/打卡 二进制存储 只有0/1两个状态)"></a><strong>(统计人数/统计信息/登陆未登录/打卡 二进制存储 只有0/1两个状态)</strong></h4><p>省内存 效率高</p>
<p>setbit 添加数据（0/1）</p>
<p>getbit 查询数据</p>
<p>bitcount 统计数据</p>
<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>Redis单条命令保证原子性，但是事务不保证原子性。</p>
<p>Redis事务没有隔离级别的概念。（没有幻读脏读不可重复读）</p>
<p>Redis事务：</p>
<ul>
<li>开启事务（multi）</li>
<li>命令入队</li>
<li>执行事务（exec）/放弃事务（discard）</li>
</ul>
<h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><p>编译型异常（代码敲错或命令有错误），事务中所以的命令都不会执行。</p>
<p>运行时异常（1/0），只有错误命令不运行，队列中其他事务依旧执行。（事务不保证原子性）</p>
<h4 id="Watch"><a href="#Watch" class="headerlink" title="Watch"></a>Watch</h4><h5 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h5><p>任何情况都加锁</p>
<h5 id="乐观锁（秒杀业务）"><a href="#乐观锁（秒杀业务）" class="headerlink" title="乐观锁（秒杀业务）"></a>乐观锁（秒杀业务）</h5><p>需要加锁的时候才加（在mysql中体现为version，即多线程同时操作一行数据时，比对version的值，只有值相同时才会执行sql语句）</p>
<p>Redis 为 watch加锁 unwatch为解锁</p>
<h3 id="jedis"><a href="#jedis" class="headerlink" title="jedis"></a>jedis</h3><p>Java通过jedis操作redis</p>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>引入maven</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;!-- jedis --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.2.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- fastjson --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.72&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>

<p>链接Redis</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//new jedis对象</span></span><br><span class="line">        Jedis jedis =<span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//测试链接</span></span><br><span class="line">        System.out.println(jedis.ping());</span><br><span class="line">        System.out.println(jedis.lpush(<span class="string">&quot;mylist&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所有的api都和在cli中操作的命令完全相同。</p>
<h4 id="jedis处理事务"><a href="#jedis处理事务" class="headerlink" title="jedis处理事务"></a>jedis处理事务</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTX</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        Transaction multi = jedis.multi();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            multi.set(<span class="string">&quot;user1&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">            multi.exec();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            multi.discard();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(jedis.get(<span class="string">&quot;user1&quot;</span>));</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SpringBoot整合Redis"><a href="#SpringBoot整合Redis" class="headerlink" title="SpringBoot整合Redis"></a>SpringBoot整合Redis</h3><p>在springboot中，jedis被替换为了lettuce。</p>
<p>jedis：采用直连，多个线程操作的话，不安全，使用jedis pool 解决。</p>
<p>lettuce： 采用netty，实例可以在多个线程中共享，线程安全，可以减少线程数量。</p>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Redis02SpringbootApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>传入对象测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="string">&quot;woongcha&quot;</span>,<span class="number">12</span>);</span><br><span class="line">    String jsonUser = <span class="keyword">new</span> ObjectMapper().writeValueAsString(user);</span><br><span class="line">    System.out.println(jsonUser);</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;user&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Caused by: org.springframework.core.serializer.support.SerializationFailedException: Failed to serialize object using DefaultSerializer; nested exception is java.lang.IllegalArgumentException: DefaultSerializer requires a Serializable payload but received an object of <span class="built_in">type</span></span><br><span class="line">Caused by: java.lang.IllegalArgumentException: DefaultSerializer requires a Serializable payload but received an object of <span class="built_in">type</span> [com.woongcha.pojo.User]</span><br></pre></td></tr></table></figure>

<p>直接传入对象会报错 （要求序列化参数）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>implements Serializable</code> 序列化后再运行，不会报错且可以执行，但redis储存的key有乱码。</p>
<h4 id="设置自己的RedisTemplate"><a href="#设置自己的RedisTemplate" class="headerlink" title="设置自己的RedisTemplate"></a>设置自己的RedisTemplate</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">// Json序列化配置</span></span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// String 的序列化</span></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="RedisUtils"><a href="#RedisUtils" class="headerlink" title="RedisUtils"></a>RedisUtils</h4><p>由于原生指令过长，需要自己写一个工具类，公司自己都有。</p>
<h4 id="Redis-conf"><a href="#Redis-conf" class="headerlink" title="Redis.conf"></a>Redis.conf</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bind <span class="number">127.0</span>.<span class="number">0.1</span> <span class="comment">//绑定的ip</span></span><br><span class="line"><span class="keyword">protected</span>-mode yes <span class="comment">//受保护的文件</span></span><br><span class="line">port <span class="number">6379</span> <span class="comment">//默认端口</span></span><br><span class="line">daemonize yes <span class="comment">//开启后台运行（守护进程的方式运行）</span></span><br><span class="line">pidfile /www/server/redis/redis.pid <span class="comment">// 以后台方式运行，指定的pid进程文件</span></span><br><span class="line"># Specify the server verbosity level.</span><br><span class="line"># This can be one of:</span><br><span class="line"># debug (a lot of information, useful for development/testing)</span><br><span class="line"># verbose (many rarely useful info, but not a mess like the debug level)</span><br><span class="line"># notice (moderately verbose, what you want in production probably)</span><br><span class="line"># warning (only very important / critical messages are logged)</span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">&quot;/www/server/redis/redis.log&quot;</span> 日志的输出文件名</span><br><span class="line"></span><br><span class="line">databases <span class="number">16</span> <span class="comment">// 默认数据库数量</span></span><br><span class="line">always-show-logo yes <span class="comment">//是否显示logo</span></span><br><span class="line">快照（持久化）</span><br><span class="line">save <span class="number">900</span> <span class="number">1</span>  <span class="comment">//900秒内至少有一个key进行修改，就进行持久化操作</span></span><br><span class="line">save <span class="number">300</span> <span class="number">10</span> <span class="comment">//300秒内至少有十个key进行修改，就进行持久化操作</span></span><br><span class="line">save <span class="number">60</span> <span class="number">10000</span> <span class="comment">//60秒内至少有一万个key进行修改，就进行持久化操作</span></span><br><span class="line">可以自己设置</span><br><span class="line">stop-writes-on-bgsave-error yes <span class="comment">//持久化出错是否继续工作</span></span><br><span class="line">rdbcompression yes <span class="comment">//是否压缩rdb文件，需要消耗cpu资源</span></span><br><span class="line">rdbchecksum yes <span class="comment">//保存rdb文件，检查。</span></span><br><span class="line">dir /www/server/redis/ <span class="comment">//rdb文件的保存目录</span></span><br><span class="line">secutity 设置redis密码 默认为空</span><br><span class="line">  通过指令 config set requirepass <span class="string">&quot;password&quot;</span>设置密码</span><br><span class="line">  通过指令 auth password 登录</span><br><span class="line">MEMORY MANAGEMENT </span><br><span class="line">    maxmemory &lt;bytes&gt; 自己设置最大占用内存</span><br><span class="line">    maxmemory-policy noeviction 内存到达顶峰的策略</span><br><span class="line">        <span class="number">1</span>、<span class="keyword">volatile</span>-lru：只对设置了过期时间的key进行LRU（默认值） </span><br><span class="line">        <span class="number">2</span>、allkeys-lru ： 删除lru算法的key   </span><br><span class="line">        <span class="number">3</span>、<span class="keyword">volatile</span>-random：随机删除即将过期key   </span><br><span class="line">        <span class="number">4</span>、allkeys-random：随机删除   </span><br><span class="line">        <span class="number">5</span>、<span class="keyword">volatile</span>-ttl ： 删除即将过期的   </span><br><span class="line">        <span class="number">6</span>、noeviction ： 永不过期，返回错误</span><br><span class="line"></span><br><span class="line"><span class="function">APPEND ONLY <span class="title">MODE</span> <span class="params">(AOF模式配置)</span></span></span><br><span class="line"><span class="function">    appendonly no <span class="comment">//默认不开启aof</span></span></span><br><span class="line"><span class="function">    appendfilename &quot;appendonly.aof&quot; <span class="comment">//持久化文件名</span></span></span><br><span class="line"><span class="function">    # appendfsync always</span></span><br><span class="line"><span class="function">    appendfsync everysec <span class="comment">//每秒同步</span></span></span><br><span class="line"><span class="function">    # appendfsync no</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>

<h3 id="Redis持久化（RDB-AOF）"><a href="#Redis持久化（RDB-AOF）" class="headerlink" title="Redis持久化（RDB/AOF）"></a>Redis持久化（RDB/AOF）</h3><h4 id="RDB触发机制"><a href="#RDB触发机制" class="headerlink" title="RDB触发机制"></a>RDB触发机制</h4><ul>
<li>满足redis.conf中的save规则</li>
<li>执行flushall命令</li>
<li>退出redis</li>
</ul>
<h4 id="RDB的恢复"><a href="#RDB的恢复" class="headerlink" title="RDB的恢复"></a>RDB的恢复</h4><p>放入redis的启动目录下，自动检测rdb文件。</p>
<h4 id="RDB的优点"><a href="#RDB的优点" class="headerlink" title="RDB的优点"></a>RDB的优点</h4><ul>
<li><p>适合大数据的数据恢复</p>
</li>
<li><p>对数据完整性要求不高</p>
</li>
</ul>
<h4 id="RDB的缺点"><a href="#RDB的缺点" class="headerlink" title="RDB的缺点"></a>RDB的缺点</h4><ul>
<li>需要一定的时间间隔</li>
<li>（redis的父进程会fork出一条子进程用于持久化）fork进程时，占用一定的内存空间</li>
</ul>
<h4 id="AOF持久化原理"><a href="#AOF持久化原理" class="headerlink" title="AOF持久化原理"></a>AOF持久化原理</h4><p>以日志的形式记录每个写操作，将Redis执行过的所有指令记录下来，只能追加文件，不能改写，redis启动时从新读取该文件构建数据库。</p>
<h4 id="redis-check-aof"><a href="#redis-check-aof" class="headerlink" title="redis-check-aof"></a>redis-check-aof</h4><p>当aof有问题或被破坏时，用redis-check-aof修复aof文件。</p>
<h4 id="AOF的优点"><a href="#AOF的优点" class="headerlink" title="AOF的优点"></a>AOF的优点</h4><ul>
<li>每次的修改都会同步（appendfsync always）</li>
</ul>
<h4 id="AOF的缺点"><a href="#AOF的缺点" class="headerlink" title="AOF的缺点"></a>AOF的缺点</h4><ul>
<li>aof远大于rdb，修复速度也比rdb慢</li>
<li>aof运行效率慢。</li>
</ul>
<h3 id="Redis发布订阅"><a href="#Redis发布订阅" class="headerlink" title="Redis发布订阅"></a>Redis发布订阅</h3><p>subscribe 消息订阅</p>
<p>publish 消息发布</p>
<h3 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h3><p><strong>主从复制的作用主要包括：</strong></p>
<p>1、数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</p>
<p>2、故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务</p>
<p>的冗余。</p>
<p>3、负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务</p>
<p>（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写</p>
<p>少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</p>
<p>4、高可用（集群）基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复</p>
<p>制是Redis高可用的基础。</p>
<h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p>配置n台从机即复制出n个配置文件（redis.conf）</p>
<p>修改配置文件</p>
<ul>
<li>修改端口号</li>
<li>修改pid文件名</li>
<li>修改log文件名</li>
<li>修改rdb文件名</li>
</ul>
<h4 id="配置集群"><a href="#配置集群" class="headerlink" title="配置集群"></a>配置集群</h4><p>新建出port：6379/6380/6381三个端口号</p>
<p>在端口号为6380的机器上：SLAVEOF 127.0.0.1 6379（自己为从机 6379 为主机）</p>
<p>6381同理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=154,lag=0</span><br><span class="line">slave1:ip=127.0.0.1,port=6381,state=online,offset=154,lag=0</span><br></pre></td></tr></table></figure>

<p>在6379中已经可以看到两个从机</p>
<h4 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h4><p>主机负责写内容，从机负责读内容。</p>
<h4 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h4><p>全量赋值：从机只要连接到主机，就会进行一次全量复制，即主机中的所有数据被从机全部复制。</p>
<p>增量复制：当主机新写入内容时，从机也会立刻同步过去。</p>
<h4 id="宕机处理"><a href="#宕机处理" class="headerlink" title="宕机处理"></a>宕机处理</h4><h5 id="手动模式"><a href="#手动模式" class="headerlink" title="手动模式"></a>手动模式</h5><p>当主机宕机时，因为从机不可写只可读，所以redis功能部分缺失，所以要将从节点晋升为主节点。</p>
<p>当主机恢复时，不会自动进入到集群中。</p>
<p>手动操作 slaveof no one  从机就会变为主机</p>
<h5 id="哨兵模式（自动选举）"><a href="#哨兵模式（自动选举）" class="headerlink" title="哨兵模式（自动选举）"></a>哨兵模式（自动选举）</h5><p>配置文件</p>
<p>sentinel.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sentinel monitor myredis 127.0.0.1 6379 1 </span><br></pre></td></tr></table></figure>

<p>执行哨兵进程</p>
<p>./redis-sentinel sentinel.conf</p>
<p>当主机6379宕机时，哨兵通过选举机制，实现将从机（6380/6381）晋升为主机的操作，使服务正常运行。</p>
<p>当主机6379恢复正常时，只能作为（6380/6381）的从机，不会自动恢复为主机。</p>
<p>优点</p>
<p>自动化。</p>
<p>缺点</p>
<p>Redis不好在线扩容，容量达到上限，在线扩容很麻烦。</p>
<h3 id="Redis缓存穿透和雪崩"><a href="#Redis缓存穿透和雪崩" class="headerlink" title="Redis缓存穿透和雪崩"></a>Redis缓存穿透和雪崩</h3><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p>当前台请求user1的数据时，redis缓存中只有user2和user3的数据，前台就会向持久层数据库中查询（mysql）。当大量用户都想查询user1的数据时，对持久层数据库造成很大的压力，就出现了缓存穿透。</p>
<p>解决办法</p>
<p><strong>布隆过滤器</strong></p>
<p>布隆过滤器是一种数据结构，对所有可能查询的参数以hash形式进行，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的查询压力。</p>
<p><strong>缓存空对象</strong></p>
<p>当存储层不命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护了后端数据源。</p>
<p>但是这种方法会存在两个问题：</p>
<p>1、如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多的空值的键；</p>
<p>2、即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响。</p>
<h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><p>同一个key在短时间内收到了大量的请求，类似微博热搜导致的微博无响应。</p>
<p>解决办法</p>
<p><strong>设置热点数据永不过期</strong></p>
<p>当热点数据不过期时，每次的请求都会指向redis缓存，而不会在缓存过期的那一瞬间砸向持久层数据库。</p>
<p><strong>分布式锁</strong></p>
<p>加锁只保证一个线程进持久层查询，其他线程在外面等待。</p>
<h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>redis宕机导致前台数据全部请求持久层数据库，瞬间冲垮数据库。</p>
<p>解决办法</p>
<p>停掉部分次要服务，保证主要业务的正常运行。</p>
<p><strong>redis高可用</strong></p>
<p>多增加几台redis，防止主机宕机。</p>
<p><strong>限流降级</strong></p>
<p>在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。</p>
<p><strong>数据预热</strong></p>
<p>在正式部署前将可能的数据先访问一遍，大量访问的数据就会加载到缓存中。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合SpringData JPA</title>
    <url>/2020/07/04/SpringBoot%E6%95%B4%E5%90%88SpringData%20JPA/</url>
    <content><![CDATA[<h1 id="SpringBoot整合SpringData-JPA"><a href="#SpringBoot整合SpringData-JPA" class="headerlink" title="SpringBoot整合SpringData JPA"></a>SpringBoot整合SpringData JPA</h1><h3 id="SpringData-JPA"><a href="#SpringData-JPA" class="headerlink" title="SpringData JPA"></a>SpringData JPA</h3><p>SpringData：是Spring为了操作数据库中的数据所提供的自动化框架，JPA只是其中一个基于数据操作的模块。</p>
<h3 id="SpringData-JPA（hibernate）-对比Mybatis"><a href="#SpringData-JPA（hibernate）-对比Mybatis" class="headerlink" title="SpringData JPA（hibernate） 对比Mybatis"></a>SpringData JPA（hibernate） 对比Mybatis</h3><p>相同点：</p>
<p>都为持久层框架</p>
<p>不同点：</p>
<p><strong>hibernate是面向对象的，而MyBatis是面向关系的</strong></p>
<p>Mybatis作为半自动化ORM关系映射，需要自己写接口并且写SQL语句。</p>
<p>hibernate作为自动化框架，无需自己写SQL语句，默认会给出常用的SQL，自动实现查询方法。</p>
<p>所需依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> Double score;</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@Id</code> 表示与数据库中的Id映射起来</p>
<p><code>@GeneratedValue</code> 表示数据是自增的</p>
<p><code>@Column</code> 与数据库中的非id字段映射</p>
<p>接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface StudentRepository extends JpaRepository&lt;Student,Long&gt; &#123;</span><br><span class="line">    public Student getById(Long id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>直接继承父类<code>JpaRepository&lt;Student,Long&gt;</code> Student为实体类，Long为主键字段对应的类型。</p>
<p>在<code>JpaRepository</code> 可以看到常用的数据库查询方法已经给出。</p>
<p>controller层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentRepository studentRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentRepository.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentRepository.save(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentRepository.save(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/deleteById/&#123;id&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        studentRepository.deleteById(id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/myspringboot?useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">hibernate:</span></span><br><span class="line">        <span class="attr">format_sql:</span> <span class="string">ture</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合Shiro</title>
    <url>/2020/07/03/SpringBoot%E6%95%B4%E5%90%88Shiro/</url>
    <content><![CDATA[<h1 id="SpringBoot整合Shiro"><a href="#SpringBoot整合Shiro" class="headerlink" title="SpringBoot整合Shiro"></a>SpringBoot整合Shiro</h1><p>Shiro：由apache出品的简单的java安全框架。某些用途和Security相似。</p>
<h3 id="Shiro核心组件"><a href="#Shiro核心组件" class="headerlink" title="Shiro核心组件"></a>Shiro核心组件</h3><p>UsernamePasswordToken Shiro用来封装用户登录信息，使用用户的登录信息创建Token。</p>
<p>SecurityManager Shiro的核心部分，负责安全认证和授权。</p>
<p>Suject Shiro的抽象概念，包含用户信息。</p>
<p>Realm 开发者自定义的模块，根据项目的需求，验证和授权的逻辑都写在Realm中。</p>
<p>AuthenticationInfo 用户的角色信息集合，认证时使用。</p>
<p>AuthorzationInfo 角色的权限信息集合，授权时使用。</p>
<p>DefaultWebSecurityManager 安全管理器，开发者自定义的Realm需要注入到DefaultWebSecurityManager进行管理才能生效。</p>
<p>ShiroFilterFactoryBean 过滤器工厂，使上面的组件得以运行。</p>
<h3 id="总体流程"><a href="#总体流程" class="headerlink" title="总体流程"></a>总体流程</h3><p>用户在访问业务时，首先会被Shiro安全框架所拦截，用户通过UsernamePasswordToken拿到自己的Token，SecurityManager负责安全认证和授权，其中认证信息都在AuthenticationInfo 中获得，授权信息都在AuthorzationInfo 中获得。AuthenticationInfo 和AuthorzationInfo 中的逻辑信息都由Realm编写。最终用户根据Shiro判断的权限可以访问到不同的页面。</p>
<h4 id="SpringBoot整合Shiro-1"><a href="#SpringBoot整合Shiro-1" class="headerlink" title="SpringBoot整合Shiro"></a>SpringBoot整合Shiro</h4><p>所需依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.3.1.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.woongcha&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springboot-shiro&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;springboot-shiro&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.apache.shiro/shiro-spring --&gt;</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.5.3&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.47&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.3.1.tmp&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">            &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">            &lt;/exclusions&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>application.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    username: root</span><br><span class="line">    password: 123456</span><br><span class="line">    url: jdbc:mysql://localhost:3306/myspringboot</span><br><span class="line"></span><br><span class="line">  thymeleaf:</span><br><span class="line">    prefix: classpath:/templates/</span><br><span class="line">    suffix: .html</span><br><span class="line">mybatis-plus:</span><br><span class="line">  configuration:</span><br><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure>

<p>详解认证逻辑的实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ublic <span class="class"><span class="keyword">class</span> <span class="title">AccountRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        Account account = accountService.findByUsername(token.getUsername());</span><br><span class="line">        <span class="keyword">if</span>(account != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(account,account.getPassword(),getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    客户端页面传递的username和password会直接封装到token里面，在调用token.getUsername()方法拿到用户名与数据库中的用户名做对比，如果为空，直接跳出验证；如果不为空，说明用户名在数据库当中，存在用户名为token中的用户。然后调用SimpleAuthenticationInfo函数，当前台传入的密码和account.getPassword()（数据库中的密码）比较，如果密码相等，就通过；如果不一样，抛出异常。</p>
<p>详解DefaultWebSecurityManager Realm ShiroFilterFactoryBean 逻辑的实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;securityManager&quot;)</span>DefaultWebSecurityManager securityManager)</span></span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean factoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        factoryBean.setSecurityManager(securityManager);</span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">securityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;accountRealm&quot;)</span> AccountRealm accountRealm)</span></span>&#123;</span><br><span class="line">        DefaultWebSecurityManager manager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        manager.setRealm(accountRealm);</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccountRealm <span class="title">accountRealm</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccountRealm();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>利用Ioc容器原理，依次将AccountRealm DefaultWebSecurityManager ShiroFilterFactoryBean 注入容器并取出，使三个组件连通。</p>
<p>编写认证和授权规则</p>
<p>认证过滤器：</p>
<p>anon：无需认证</p>
<p>authc：必须认证</p>
<p>authcBasic：需要通过HttpBasic认证</p>
<p>user：不一定通过认证，只要曾经被Shiro记录过即可。</p>
<p>授权过滤器：</p>
<p>perms：必须拥有某个权限</p>
<p>role：必须拥有某个角色</p>
<p>port：请求的端口必须是指定值。</p>
<p>rest：请求必须基于Restful ，POST，GET，PUT，DELETE</p>
<p>ssl：必须是安全的URL请求，符合HTTPS协议。</p>
<p>创建三个页面分配赋予不同权限main.html,manage.html,administrator.html</p>
<p>访问权限如下：</p>
<p>1 必须登录才能访问 main</p>
<p>2 用户必须有manage权限 manage.html</p>
<p>3用户必须有administrator角色 administrator.html</p>
<h5 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h5><p>在ShiroConfig中预设登录界面，不使用默认的login界面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class ShiroConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier(&quot;securityManager&quot;)DefaultWebSecurityManager securityManager)&#123;</span><br><span class="line">        ShiroFilterFactoryBean factoryBean &#x3D; new ShiroFilterFactoryBean();</span><br><span class="line">        factoryBean.setSecurityManager(securityManager);</span><br><span class="line">        &#x2F;&#x2F;权限设置</span><br><span class="line">        Map&lt;String,String&gt; map &#x3D; new Hashtable&lt;&gt;();</span><br><span class="line">        map.put(&quot;&#x2F;main&quot;,&quot;authc&quot;);</span><br><span class="line">        map.put(&quot;&#x2F;manage&quot;,&quot;perms[manage]&quot;);</span><br><span class="line">        map.put(&quot;&#x2F;administrator&quot;,&quot;roles[administrator]&quot;);</span><br><span class="line">        factoryBean.setFilterChainDefinitionMap(map);</span><br><span class="line">        &#x2F;&#x2F;设置登陆页面</span><br><span class="line">        factoryBean.setLoginUrl(&quot;&#x2F;login&quot;);</span><br><span class="line">        return factoryBean;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public DefaultWebSecurityManager securityManager(@Qualifier(&quot;accountRealm&quot;) AccountRealm accountRealm)&#123;</span><br><span class="line">        DefaultWebSecurityManager manager &#x3D; new DefaultWebSecurityManager();</span><br><span class="line">        manager.setRealm(accountRealm);</span><br><span class="line">        return manager;</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public AccountRealm accountRealm()&#123;</span><br><span class="line">        return new AccountRealm();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>controller层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;url&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">redirect</span><span class="params">(<span class="meta">@PathVariable(&quot;url&quot;)</span> String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username, String password, Model model)</span> </span>&#123;</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;用户名错误！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IncorrectCredentialsException e) &#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;密码错误！&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>subject.login(token) 将验证的部分交给Shiro来做，通过subject的login方法，验证身份。</p>
<p>登陆页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结：在Shiro Config文件中，通过依赖注入的方式将三个模块串联起来，只需编写ShiroFilterFactoryBean的业务逻辑即可，且在controller层中，将验证的部分交给Shiro来做，通过subject的login方法，验证身份，达到登陆验证的目的。</p>
<p>​    </p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合Spring Security</title>
    <url>/2020/07/03/SpringBoot%E6%95%B4%E5%90%88Spring%20Security/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="SpringBoot整合Spring-Security"><a href="#SpringBoot整合Spring-Security" class="headerlink" title="SpringBoot整合Spring Security"></a>SpringBoot整合Spring Security</h1><h3 id="Spring-Security简单使用"><a href="#Spring-Security简单使用" class="headerlink" title="Spring Security简单使用"></a>Spring Security简单使用</h3><p>所需依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.html</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>controller层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在引入security依赖下，随意访问页面，都会跳转到login页面</p>
<p>用户名为 user</p>
<p>密码在控制台随机生成</p>
<p>自定义密码</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.html</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>



<h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><p>创建MyPasswordEncoder类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.woongcha.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line">public class MyPasswordEncoder implements PasswordEncoder &#123;</span><br><span class="line">    public String encode(CharSequence charSequence) &#123;</span><br><span class="line">        return charSequence.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean matches(CharSequence charSequence, String s) &#123;</span><br><span class="line">        return s.equals(charSequence.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>继承PasswordEncoder,<code>encode</code> 方法是将传入的参数转成字符串输出,<code>matches</code> 是将s(前台传过来的密码)与charSequence进行比较.</p>
<p>创建Security类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableWebSecurity</span><br><span class="line">public class SecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;</span><br><span class="line">        auth.inMemoryAuthentication().passwordEncoder(new MyPasswordEncoder())</span><br><span class="line">        .withUser(&quot;user&quot;).password(new MyPasswordEncoder().encode(&quot;000&quot;)).roles(&quot;USER&quot;)</span><br><span class="line">        .and()</span><br><span class="line">        .withUser(&quot;admin&quot;).password(new MyPasswordEncoder().encode(&quot;123&quot;)).roles(&quot;ADMIN&quot;,&quot;USER&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        http.authorizeRequests().antMatchers(&quot;&#x2F;admin&quot;).hasRole(&quot;ADMIN&quot;)</span><br><span class="line">                .antMatchers(&quot;&#x2F;index&quot;).access(&quot;hasRole(&#39;ADMIN&#39;) or hasRole(&#39;USER&#39;)&quot;)</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .loginPage(&quot;&#x2F;login&quot;)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .logout()</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .csrf()</span><br><span class="line">                .disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改Handler</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.woongcha.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class StudentHandler &#123;</span><br><span class="line">    @GetMapping(&quot;&#x2F;index&quot;)</span><br><span class="line">    public String index() &#123;</span><br><span class="line">        return &quot;index&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;admin&quot;)</span><br><span class="line">    public String admin() &#123;</span><br><span class="line">        return &quot;admin&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;login&quot;)</span><br><span class="line">    public String login() &#123;</span><br><span class="line">        return &quot;login&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>新建三个html页面</p>
<p>admin.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>后台管理系统<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/logout&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;退出&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>test<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/logout&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;退出&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>login.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>启动后发现,index页面由user—-000和admin—123都能登录,而admin用户还可以访问admin界面,user用户无法访问.</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 整合 Mybatis plus（从零开始学习Mybatis Plus）</title>
    <url>/2020/07/01/Spring%20Boot%20%E6%95%B4%E5%90%88%20Mybatis%20plus%EF%BC%88%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0Mybatis%20Plus%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Spring-Boot-整合-Mybatis-plus（从零开始学习Mybatis-Plus）"><a href="#Spring-Boot-整合-Mybatis-plus（从零开始学习Mybatis-Plus）" class="headerlink" title="Spring Boot 整合 Mybatis plus（从零开始学习Mybatis Plus）"></a>Spring Boot 整合 Mybatis plus（从零开始学习Mybatis Plus）</h1><h2 id="什么是Mybatis-plus"><a href="#什么是Mybatis-plus" class="headerlink" title="什么是Mybatis plus"></a>什么是Mybatis plus</h2><p>Mybatis：Mybatis是一款面向对象的关系型数据库。</p>
<p>Mybatis plus：Mybatis plus在Mybatis的基础上，简化了开发步骤，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。所以，在学习Mybatis plus之前应该对Mybatis有充分的认识，熟悉Mybatis的开发流程。</p>
<p>本文基于Spring Boot编写</p>
<p>Maven</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="TableName"><a href="#TableName" class="headerlink" title="@TableName"></a>@TableName</h3><p>表名注解，用于实体类和数据库中表的映射，当实体类类名与数据库中表名一致时，无需加此注解。</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="TableId"><a href="#TableId" class="headerlink" title="@TableId"></a>@TableId</h3><p>主键注解，标明主键。</p>
<p>可添加主键名，与数据库中的主键映射起来。</p>
<p>例：数据库中user表分别有id name age三个属性。但实体类中的属性名为myId，无法自动映射。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId(&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer myId;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行查询语句后，控制台如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&gt;  Preparing: SELECT id AS myId,name,age FROM user </span><br><span class="line">&#x3D;&#x3D;&gt; Parameters: </span><br><span class="line">&lt;&#x3D;&#x3D;    Columns: myId, name, age</span><br><span class="line">&lt;&#x3D;&#x3D;        Row: 1, zhangsan, 22</span><br><span class="line">&lt;&#x3D;&#x3D;        Row: 2, lisi, 23</span><br><span class="line">&lt;&#x3D;&#x3D;        Row: 3, wangwu, 24</span><br><span class="line">&lt;&#x3D;&#x3D;        Row: 4, zhaoliu, 25</span><br><span class="line">&lt;&#x3D;&#x3D;      Total: 4</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@5434e40c]</span><br><span class="line">Student(myId&#x3D;1, name&#x3D;zhangsan, age&#x3D;22)</span><br><span class="line">Student(myId&#x3D;2, name&#x3D;lisi, age&#x3D;23)</span><br><span class="line">Student(myId&#x3D;3, name&#x3D;wangwu, age&#x3D;24)</span><br><span class="line">Student(myId&#x3D;4, name&#x3D;zhaoliu, age&#x3D;25)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们通过通知台可以看出，Mybatis plus 自动将id 映射为myId，并且输出。</p>
<p>还可添加type，表明主键的类型。</p>
<p>例：使用type = IdType.AUTO </p>
<p>取消数据库中id的自增选项，通过实体类注解实现id自增。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@TableName(&quot;user&quot;)</span><br><span class="line">public class Student &#123;</span><br><span class="line">    @TableId(value &#x3D; &quot;id&quot;,type &#x3D; IdType.AUTO)</span><br><span class="line">    private Integer myId;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例：使用 type = IdType.INPUT  </p>
<p>当你给Id赋值时，Id会使用你所输入的值，添加到数据库；当你不赋值时，会自动递增。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setMyId(<span class="number">6</span>);</span><br><span class="line">        student.setAge(<span class="number">100</span>);</span><br><span class="line">        student.setName(<span class="string">&quot;testPerson&quot;</span>);</span><br><span class="line">        mapper.insert(student);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setAge(<span class="number">99</span>);</span><br><span class="line">        student.setName(<span class="string">&quot;testPerson1&quot;</span>);</span><br><span class="line">        mapper.insert(student);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>执行添加语句后，数据库如下：</p>
<table>
<thead>
<tr>
<th>1</th>
<th>zhangsan</th>
<th>22</th>
</tr>
</thead>
<tbody><tr>
<td>2</td>
<td>lisi</td>
<td>23</td>
</tr>
<tr>
<td>3</td>
<td>wangwu</td>
<td>24</td>
</tr>
<tr>
<td>6</td>
<td>testPerson</td>
<td>100</td>
</tr>
<tr>
<td>7</td>
<td>testPerson1</td>
<td>99</td>
</tr>
</tbody></table>
<p>可知，当我们赋予主键值为6时，直接在数据库中插入id为6的数据，跳过了4、5，在插入testPerson1的数据时，没有给出id，所以系统通过自增的方式给id赋值。</p>
<p>例： type = IdType.ASSIGN_ID   </p>
<p>注：因为默认使用了雪花算法，对主键的数据类型有要求，建议用包装类Long</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>age</th>
</tr>
</thead>
<tbody><tr>
<td>126894546124674</td>
<td>testPerson5</td>
<td>96</td>
</tr>
</tbody></table>
<p>例4：type = IdType.ASSIGN_UUID  </p>
<p>注：因为默认使用了雪花算法，对主键的数据类型有要求，必须使用String类型。</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>age</th>
</tr>
</thead>
<tbody><tr>
<td>b1w26rsar894y5g46sr12467i4feq56</td>
<td>testPerson6</td>
<td>96</td>
</tr>
</tbody></table>
<h3 id="TableField"><a href="#TableField" class="headerlink" title="@TableField"></a>@TableField</h3><p>非主键注解，标明数据库属性与实体类的映射关系。输出结果和@TableId基本相同，这里不再演示。</p>
<h3 id="Version"><a href="#Version" class="headerlink" title="@Version"></a>@Version</h3><p>乐观锁的主要目的时防止多线程修改数据时，数据被多次修改，数据库无法及时更新的现象。</p>
<p>例：</p>
<p>给数据库添加version属性，并给出默认值。</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>age</th>
<th>version</th>
</tr>
</thead>
<tbody><tr>
<td>xx</td>
<td>xxx</td>
<td>xx</td>
<td>1</td>
</tr>
</tbody></table>
<p>给实体类添加@Version注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure>

<p>添加配置类，将乐观锁注入到容器中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进行修改操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Student student  = mapper.selectById(<span class="number">3</span>);</span><br><span class="line">    student.setName(<span class="string">&quot;zhangsanfeng&quot;</span>);</span><br><span class="line">    mapper.updateById(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过控制台我们可知</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&gt;  Preparing: UPDATE user SET name&#x3D;?, age&#x3D;?, version&#x3D;? WHERE id&#x3D;? AND version&#x3D;? </span><br><span class="line">&#x3D;&#x3D;&gt; Parameters: zhangsanfeng(String), 24(Integer), 2(Integer), 3(Integer), 1(Integer)</span><br><span class="line">&lt;&#x3D;&#x3D;    Updates: 1</span><br></pre></td></tr></table></figure>

<p>不但对姓名做了修改，当这条SQL语句成功后，version变为了2</p>
<p>原数据库</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>age</th>
<th>version</th>
</tr>
</thead>
<tbody><tr>
<td>3</td>
<td>zhansgan</td>
<td>12</td>
<td>1</td>
</tr>
</tbody></table>
<p>修改后的数据库</p>
<table>
<thead>
<tr>
<th>id</th>
<th align="left">name</th>
<th>age</th>
<th>version</th>
</tr>
</thead>
<tbody><tr>
<td>3</td>
<td align="left">zhangsanfeng</td>
<td>xx</td>
<td>2</td>
</tr>
</tbody></table>
<h3 id="EnumValue"><a href="#EnumValue" class="headerlink" title="@EnumValue"></a>@EnumValue</h3><p>通过枚举，将数据库中的字段映射成具有实际意义的新字段。</p>
<p>例：在数据库中，1代表男性 2代表女性，通过枚举，在控制台上直接输出sex = 男性而不是sex = 1</p>
<p>创建枚举类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SexEnum &#123;</span><br><span class="line">    SEXM(<span class="number">1</span>,<span class="string">&quot;男性&quot;</span>),</span><br><span class="line">    SEXF(<span class="number">2</span>,<span class="string">&quot;女性&quot;</span>);</span><br><span class="line">      </span><br><span class="line">    <span class="meta">@EnumValue</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    </span><br><span class="line">    SexEnum(Integer code, String sex) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>实体类中添加性别属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> SexEnum sex;</span><br></pre></td></tr></table></figure>

<p>修改application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">type-enums-package:</span> <span class="string">com.woongcha.myspringbootmybatisplus.enums</span></span><br></pre></td></tr></table></figure>

<p>执行查询语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Student(myId&#x3D;1, name&#x3D;zhangsan, age&#x3D;22, version&#x3D;1, sex&#x3D;SEXM)</span><br><span class="line">Student(myId&#x3D;2, name&#x3D;lisi, age&#x3D;23, version&#x3D;1, sex&#x3D;SEXM)</span><br><span class="line">Student(myId&#x3D;3, name&#x3D;zhangsanfeng, age&#x3D;24, version&#x3D;2, sex&#x3D;SEXM)</span><br></pre></td></tr></table></figure>

<p>可以看到，sex=1被替换成了sex=SEXM。</p>
<h3 id="TableLogic"><a href="#TableLogic" class="headerlink" title="@TableLogic"></a>@TableLogic</h3><p>表字段逻辑处理注解（逻辑删除），即部分数据我们不想展示出来，可以隐藏起来。</p>
<p>实体类中添加隐藏属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Integer hide;</span><br></pre></td></tr></table></figure>

<p>修改application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">global-config:</span></span><br><span class="line">  <span class="attr">db-config:</span></span><br><span class="line">    <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">logic-delete-field:</span> <span class="number">1</span>    </span><br></pre></td></tr></table></figure>

<p>执行删除语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mapper.deleteById(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看数据库</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>age</th>
<th>hide</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>zhangsan</td>
<td>22</td>
<td>1</td>
</tr>
</tbody></table>
<p>数据并没有从数据库中删除，但hide的值由0变成了1，达到了逻辑上删除的目的。</p>
<p>执行查询语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mapper.selectList(<span class="keyword">null</span>).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&gt;  Preparing: SELECT id AS myId,name,age,version,sex,hide FROM user WHERE hide&#x3D;0 </span><br><span class="line">&#x3D;&#x3D;&gt; Parameters: </span><br><span class="line">&lt;&#x3D;&#x3D;    Columns: myId, name, age, version, sex, hide</span><br><span class="line">&lt;&#x3D;&#x3D;        Row: 2, lisi, 23, 1, 1, 0</span><br><span class="line">&lt;&#x3D;&#x3D;      Total: 1</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@7da39774]</span><br><span class="line">Student(myId&#x3D;2, name&#x3D;lisi, age&#x3D;23, version&#x3D;1, sex&#x3D;SEXM, hide&#x3D;0)</span><br></pre></td></tr></table></figure>

<p>SQL语句默认执行where hide=0，说明逻辑删除成功，且查不到我们删除的数据。</p>
<h2 id="手动编写SQL语句"><a href="#手动编写SQL语句" class="headerlink" title="手动编写SQL语句"></a>手动编写SQL语句</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inSQL</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryWrapper wrapper =<span class="keyword">new</span> QueryWrapper();</span><br><span class="line">    wrapper.inSql(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;select id from user Where id = 1&quot;</span>);</span><br><span class="line">    System.out.println(mapper.selectList(wrapper));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台可以看到查询到了结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&gt;  Preparing: SELECT id AS myId,name,age,version,sex,hide FROM user WHERE hide&#x3D;0 AND (id IN (select id from user Where id &#x3D; 1)) </span><br><span class="line">&#x3D;&#x3D;&gt; Parameters: </span><br><span class="line">&lt;&#x3D;&#x3D;    Columns: myId, name, age, version, sex, hide</span><br><span class="line">&lt;&#x3D;&#x3D;        Row: 1, zhangsan, 22, 1, 1, 0</span><br><span class="line">&lt;&#x3D;&#x3D;      Total: 1</span><br></pre></td></tr></table></figure>



<h2 id="Mybatis-Plus-逆向工程"><a href="#Mybatis-Plus-逆向工程" class="headerlink" title="Mybatis Plus 逆向工程"></a>Mybatis Plus 逆向工程</h2><h3 id="什么是逆向工程？"><a href="#什么是逆向工程？" class="headerlink" title="什么是逆向工程？"></a>什么是逆向工程？</h3><p>逆向工程是通过数据库中已经存在的数据表，反向生成<code>java</code>中的实体类，并且生成对应的ORM（Object Relationship Mapping 对象关系映射）持久层代码。</p>
<p>在Mybatis官方中给出了Mybatis Generator（MBG），在Mybatis Plus中，AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</p>
<p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在任意路径新建Generator.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 代码生成器-创建generator对象</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">&quot;woongcha&quot;</span>);</span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/myspringboot?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC&quot;</span>);</span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        pc.setParent(<span class="string">&quot;com.woongcha.myspringbootmybatisplus&quot;</span>);</span><br><span class="line">        pc.setModuleName(<span class="string">&quot;generator&quot;</span>);</span><br><span class="line">        pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        pc.setServiceImpl(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        pc.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行Generator.java</p>
<p>快速生成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Mybatis Plus 由中国人开发，相比Mybaits，跟符合中国人的习惯，例如中文的注释等。</p>
<p>相比Mybatis 主要简化了编写SQL语句的过程，且提供了大量的方法，用大多数人的使用。</p>
<p>Mybaits Plus Generator 集成了MBG的优点，且更灵活，能介入的更多，例如下划线命名法转换成驼峰命名等。</p>
<p>本文简化了CRUD的介绍，因为CRUD在编程的过程中Mybatis Plus过程中会有大量的中文提示，会明确的告诉你方法的意思以及属性的填写。</p>
<p>码字不易，感谢支持。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 中 JSP和HTML的简单使用</title>
    <url>/2020/06/29/SpringBoot%20%E4%B8%AD%20JSP%E5%92%8CHTML%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="SpringBoot-中-JSP和HTML的简单使用"><a href="#SpringBoot-中-JSP和HTML的简单使用" class="headerlink" title="SpringBoot 中 JSP和HTML的简单使用"></a>SpringBoot 中 JSP和HTML的简单使用</h1><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><p>在pom文件中引入相应的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 整合JSP --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建application.yml文件</p>
<p>因为SpringBoot无需添加springMVC的配置文件，所以直接在application中配置视图解析器的前缀和后缀。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">view:</span></span><br><span class="line">      <span class="attr">prefix:</span> <span class="string">/</span></span><br><span class="line">      <span class="attr">suffix:</span> <span class="string">.jsp</span></span><br></pre></td></tr></table></figure>



<p>简化Controller层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;list&quot;</span>,studentRepository.findAll());</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>JSP页面</p>
<p><code>&lt;%@ page isELIgnored=&quot;false&quot; %&gt;</code>  允许使用el表达式</p>
<p><code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code> 核心标签是最常用的 JSTL标签。引用核心标签库的语法.</p>
<p><code>&lt;c:forEach items=&quot;$&#123;list&#125;&quot; var=&quot;student&quot;&gt;</code> 遍历</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: woongcha</span><br><span class="line">  Date: <span class="number">2020</span>-<span class="number">06</span>-<span class="number">26</span></span><br><span class="line">  Time: <span class="number">20</span>:<span class="number">02</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;test&lt;/h1&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;ID&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;NAME&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;AGE&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;c:forEach items=<span class="string">&quot;$&#123;list&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;student&quot;</span>&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;$&#123;student.id&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;student.name&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;student.age&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/c:forEach&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="HTML循环"><a href="#HTML循环" class="headerlink" title="HTML循环"></a>HTML循环</h3><p>在pom文件中引入相应的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">     <span class="comment">&lt;!-- 引入thymeleaf依賴 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- web启动jar包 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建application.yml文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.html</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">HTML5</span></span><br><span class="line">    <span class="attr">encoding:</span> <span class="string">UTF-8</span></span><br></pre></td></tr></table></figure>

<p>Controller层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;index...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>HTML页面</p>
<p><code>&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;&lt;/html&gt; </code> 引用thymeleaf语法</p>
<p><code>&lt;tr th:each=&quot;student,seat:$&#123;list&#125;&quot; th:style=&quot;&#39;background-color:&#39;+@&#123;$&#123;seat.odd&#125;?&#39;#F2F2F2&#39;&#125;&quot;&gt;</code>  seat起计数器的作用，随着list的循环，seat也一直增加。 </p>
<p><code>background-color:</code> 背景色   </p>
<p><code>@&#123;$&#123;seat.odd&#125;?&#39;#F2F2F2&#39;&#125;</code> 当seat值为偶数的时候，所在行的背景色为#F2F2F2   even表示偶数 odd为奇数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>index<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>count<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>学生id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>学生姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>学生年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;student,seat:$&#123;list&#125;&quot;</span> <span class="attr">th:style</span>=<span class="string">&quot;&#x27;background-color:&#x27;+@&#123;$&#123;seat.odd&#125;?&#x27;#F2F2F2&#x27;&#125;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;seat.index&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;seat.count&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;student.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;student.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;student.age&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="HTML赋值-拼接"><a href="#HTML赋值-拼接" class="headerlink" title="HTML赋值  拼接"></a>HTML赋值  拼接</h3><p>Controller层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/index2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index2</span><span class="params">(Map&lt;String,String&gt; map)</span> </span>&#123;</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index2&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>HTML</p>
<p><code>&lt;p th:text=&quot;$&#123;name&#125;&quot;&gt;&lt;/p&gt;</code> 取到name的值</p>
<p><code>&lt;p th:text=&quot;&#39;学生姓名是&#39;+$&#123;name&#125;&quot;&gt;&lt;/p&gt;</code> <code>&lt;p th:text=&quot;|学生姓名是$&#123;name&#125;|&quot;&gt;&lt;/p&gt;</code> 字符与数据拼接的两种方法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;&#x27;学生姓名是&#x27;+$&#123;name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;|学生姓名是$&#123;name&#125;|&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="HTML条件判断"><a href="#HTML条件判断" class="headerlink" title="HTML条件判断"></a>HTML条件判断</h3><p>th:if 表示条件成立时显示内容</p>
<p>th:unless 表示条件不成立时显示内容</p>
<p>Controller层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/index3&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index3</span><span class="params">(Map&lt;String, Boolean&gt; map)</span> </span>&#123;</span><br><span class="line">    map.put(<span class="string">&quot;flag&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index3&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>HTML</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;flag == true&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;if判断成立&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;flag != true&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;unless判断成立&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="HTML中URL的使用"><a href="#HTML中URL的使用" class="headerlink" title="HTML中URL的使用"></a>HTML中URL的使用</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;http://www.baidu.com&#125;&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="通过HTML传数据"><a href="#通过HTML传数据" class="headerlink" title="通过HTML传数据"></a>通过HTML传数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/index2/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index2</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index2&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/index4&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index4</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index4&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>index4.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;http://www.baidu.com&#125;&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;http://localhost:9090/index/index2/&#123;name&#125;(name=$&#123;name&#125;)&#125;&quot;</span>&gt;</span>跳转2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>index2.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;&#x27;学生姓名是&#x27;+$&#123;name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;|学生的姓名是$&#123;name&#125;|&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;a th:href=&quot;@&#123;http://localhost:9090/index/index2/&#123;name&#125;(name=$&#123;name&#125;)&#125;&quot;&gt;跳转2&lt;/a&gt;</code> </p>
<p>其中<code>&#123;name&#125;(name=$&#123;name&#125;)</code> 第一个name为从第二个name中接收到的值，第三个name通过EL表达式将<code>model.addAttribute(&quot;name&quot;,&quot;tom&quot;);</code> 中的tom传给第二个name。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM框架搭建</title>
    <url>/2020/06/16/SSM%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<h2 id="SSM框架搭建心得"><a href="#SSM框架搭建心得" class="headerlink" title="SSM框架搭建心得"></a>SSM框架搭建心得</h2><h3 id="Spring-SpringMVC-MyBatis的关系"><a href="#Spring-SpringMVC-MyBatis的关系" class="headerlink" title="Spring SpringMVC MyBatis的关系"></a>Spring SpringMVC MyBatis的关系</h3><p>Spring容器中包括Mapper代理对象、Service层以及SpringMVC，SpringMVC用到了MVC模型，将逻辑代码放到Controller层处理。Mybatis使Java应用与数据库连接起来，处理与数据库的CRUD相关的操作。</p>
<p>SpringMVC处理Jsp到handler，handler调用Service，Service在调用repository，repository就需要用到Mybatis了。</p>
<h3 id="meaven的创建"><a href="#meaven的创建" class="headerlink" title="meaven的创建"></a>meaven的创建</h3><p>创建一个maven，应用原型模板创建，省事。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200520113954990.png" alt="image-20200520113954990"></p>
<p>pom.xml文件的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Spring JDBC --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Spring AOP --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- MyBatis --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- MyBatis整合Spring --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- C3P0 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- JSTL --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意：mysql的依赖jar包需根据自己实际情况添加版本号，其他配置均使用最新版。</li>
</ul>
<h3 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h3><p>当web程序启动时，首先要读的就是web.xml,所以要在web.xml中配置Spring，使Spring管理web工程中相关的组件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 启动Spring --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Spring MVC --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 字符编码过滤器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 加载静态资源 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.js<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.css<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jpg<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>contextConfigLocation</p>
<ul>
<li>classpath默认指向resources文件夹的根目录。</li>
<li>spring.xml是Spring的配置文件。</li>
</ul>
<p>ContextLoaderListener</p>
<ul>
<li>配置监听器管理框架中的所有组件。</li>
</ul>
<p>context-param与init-param</p>
<ul>
<li>context-param为全局配置，init-param为MVC自己的配置。</li>
</ul>
<p>dispatcherServlet</p>
<ul>
<li>用于拦截所有请求</li>
</ul>
<h3 id="配置spring-xml"><a href="#配置spring-xml" class="headerlink" title="配置spring.xml"></a>配置spring.xml</h3><p>在 spring.xml 中配置 MyBatis 和 Spring 的整合（通过Spring管理MyBatis）。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 整合MyBatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置MyBatis SqlSessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/woongcha/repository/*.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:config.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描自定义的Mapper接口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.woongcha.repository&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置MyBatis SqlSessionFactory</p>
<ul>
<li>把数据库信息注入到Spring容器中。</li>
<li>mapperLocations 找到自定义mapper接口的代理对象，读取到其中的sql语句。</li>
<li>configLocation 找到Mybatis的全局配置。</li>
</ul>
<p>扫描自定义的Mapper接口</p>
<ul>
<li>扫描到的接口放入IoC容器中，使之自己生成。</li>
</ul>
<h3 id="配置config-xml"><a href="#配置config-xml" class="headerlink" title="配置config.xml"></a>配置config.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打印SQL--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定一个包名，MyBatis会在包名下搜索需要的JavaBean--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.woongcha.entity&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置-springmvc-xml"><a href="#配置-springmvc-xml" class="headerlink" title="配置 springmvc.xml"></a>配置 springmvc.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启动注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描业务代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.woongcha&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>视图解析器</p>
<ul>
<li>prefix 前缀 </li>
<li>suffix 后缀</li>
</ul>
<h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建Repository"><a href="#创建Repository" class="headerlink" title="创建Repository"></a>创建Repository</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.woongcha.entity.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentRepository</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.woongcha.repository.StudentRepository&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        select * from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建Service"><a href="#创建Service" class="headerlink" title="创建Service"></a>创建Service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.woongcha.entity.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha.Service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.woongcha.Service.StudentService;</span><br><span class="line"><span class="keyword">import</span> com.woongcha.entity.Student;</span><br><span class="line"><span class="keyword">import</span> com.woongcha.repository.StudentRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="comment">//注入studentRepository</span></span><br><span class="line">    <span class="keyword">private</span> StudentRepository studentRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Service：用于标注业务层组件,表示定义一个bean，自动根据bean的类名实例化一个首字母为小写的bean，例如Chinese实例化为chinese，如果需要自己改名字则:@Service(“你自己改的bean名”)。  </p>
<h3 id="创建Controller"><a href="#创建Controller" class="headerlink" title="创建Controller"></a>创建Controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.woongcha.Service.StudentService;</span><br><span class="line"><span class="keyword">import</span> com.woongcha.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="comment">//注入studentService</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ModelAndView modelAndView=<span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;list&quot;</span>, studentService.findAll());</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>@Controller用于标注控制层组件。</p>
<h3 id="创建index-jsp"><a href="#创建index-jsp" class="headerlink" title="创建index.jsp"></a>创建index.jsp</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;NEWJSP!&lt;/h2&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;list&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;student&quot;</span>&gt;</span><br><span class="line">    $&#123;student.id&#125;--$&#123;student.name&#125;--$&#123;student.cid&#125;&lt;br/&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;h2&gt;NEWJSP OVER!&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>&lt;%@ page isELIgnored=”false” %&gt;</p>
<ul>
<li>使之能够读取到EL表达式。</li>
</ul>
<p>&lt;%@ taglib prefix %&gt;</p>
<ul>
<li>添加jstl标签</li>
</ul>
<h3 id="结果演示"><a href="#结果演示" class="headerlink" title="结果演示"></a>结果演示</h3><img src= "/img/loading.gif" data-lazy-src="https://blog-hexo-butterfly.oss-cn-beijing.aliyuncs.com/img/image-20200520131435602.png" alt="image-20200520131435602" style="zoom:50%;" />







<h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><h4 id="java文件中的xml格式文件无法读取，解决办法："><a href="#java文件中的xml格式文件无法读取，解决办法：" class="headerlink" title="java文件中的xml格式文件无法读取，解决办法："></a>java文件中的xml格式文件无法读取，解决办法：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="lombok无法使用，解决办法："><a href="#lombok无法使用，解决办法：" class="headerlink" title="lombok无法使用，解决办法："></a>lombok无法使用，解决办法：</h4><p>idea 下载 Lombok 插件（光导入jar包是没有用的）</p>
<h4 id="Tomcat无法启动，解决办法："><a href="#Tomcat无法启动，解决办法：" class="headerlink" title="Tomcat无法启动，解决办法："></a>Tomcat无法启动，解决办法：</h4><p>查看对应Tomcat对应的Java版本，tomcat7及以下只能使用java1.7以下版本。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC工作流程</title>
    <url>/2020/05/26/Spring%20MVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h3><p>SpringMVC是Spring的分支产品，以SpringIoC容器为基础，并利用容器的特性简化它的配置。</p>
<h4 id="Spring-MVC组件"><a href="#Spring-MVC组件" class="headerlink" title="Spring MVC组件"></a>Spring MVC组件</h4><ul>
<li>DispatcherServlet：前置控制器，是整个流程控制的核心，控制其他组件的执行，进行统一调度，降低组件之间的耦合性，相当于总指挥。</li>
<li>Handler：处理器，完成具体的业务逻辑，相当于 Servlet 或 Action。</li>
<li>HandlerMapping：DispatcherServlet 接收到请求之后，通过 HandlerMapping 将不同的请求映射到不同的 Handler。</li>
<li>HandlerInterceptor：处理器拦截器，是一个接口，如果需要完成一些拦截处理，可以实现该接口。</li>
<li>HandlerExecutionChain：处理器执行链，包括两部分内容：Handler 和 HandlerInterceptor（系统会有一个默认的 HandlerInterceptor，如果需要额外设置拦截，可以添加拦截器）。</li>
<li>HandlerAdapter：处理器适配器，Handler 执行业务方法之前，需要进行一系列的操作，包括表单数据的验证、数据类型的转换、将表单数据封装到 JavaBean 等，这些操作都是由 HandlerApater 来完成，开发者只需将注意力集中业务逻辑的处理上，DispatcherServlet 通过 HandlerAdapter 执行不同的 Handler。</li>
<li>ModelAndView：装载了模型数据和视图信息，作为 Handler 的处理结果，返回给 DispatcherServlet。</li>
<li>ViewResolver：视图解析器，DispatcheServlet 通过它将逻辑视图解析为物理视图，最终将渲染结果响应给客户端。</li>
</ul>
<h4 id="Spring-MVC工作流程"><a href="#Spring-MVC工作流程" class="headerlink" title="Spring MVC工作流程"></a>Spring MVC工作流程</h4><ol>
<li>客户端发出请求，被DispatcherServlet接收。</li>
<li>DispatcherServlet根据HandlerMapper找到对应的Handler（通过HandlerMapper映射到Handler）。</li>
<li>Handler通过HandlerExecutionChain返回给DispatcherServlet（HandlerExecutionChain包括Handler和HandlerInterceptor）。</li>
<li>DispatcherServlet通过HandlerAdapter执行不同的Handler完成业务逻辑处理。</li>
<li>HandlerAdapter执行Handler后拿到ModelAndView。</li>
<li>HandlerAdapter把ModelAndView返回给DispatcherServlet。</li>
<li>DispatcherServlet通过ViewResolver解析拿到的ModelAndView，将逻辑视图解析为物理视图 View。</li>
<li>ViewResolver返回View给DispatcherServlet。</li>
<li>DispatcherServlet 根据 View 进行视图渲染（将模型数据 Model 填充到视图 View 中）。</li>
<li>DispatcherServlet 将渲染后的结果响应给客户端。</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>使用spring框架下的AOP</title>
    <url>/2020/05/14/%E4%BD%BF%E7%94%A8spring%E6%A1%86%E6%9E%B6%E4%B8%8B%E7%9A%84AOP/</url>
    <content><![CDATA[<h3 id="使用spring框架下的AOP"><a href="#使用spring框架下的AOP" class="headerlink" title="使用spring框架下的AOP"></a>使用spring框架下的AOP</h3><p>由于spring框架对AOP进行了封装，所以可以用面向对象的方法实现AOP。</p>
<p>只需要创建一个切面对象，将所有的非业务信息放进去即可。</p>
<h4 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerAspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(public int com.woongcha.utils.impl.CalImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        String name=joinPoint.getSignature().getName();</span><br><span class="line">        String args= Arrays.toString(joinPoint.getArgs());</span><br><span class="line">        System.out.println(name+<span class="string">&quot;方法的参数是：&quot;</span>+args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After(&quot;execution(public int com.woongcha.utils.impl.CalImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        String name=joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">&quot;方法执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(public int com.woongcha.utils.impl.CalImpl.*(..))&quot;,returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint joinPoint,Object result)</span></span>&#123;</span><br><span class="line">        String name=joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;结果是：&quot;</span>+result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterThrowing(value =&quot;execution(public int com.woongcha.utils.impl.CalImpl.*(..))&quot;,throwing = &quot;exception&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(JoinPoint joinPoint,Object exception)</span></span>&#123;</span><br><span class="line">        String name=joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">&quot;异常抛出&quot;</span>+exception);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h5><p>为了让IoC容器获取到这个切面类中的方法。</p>
<h5 id="Aspect"><a href="#Aspect" class="headerlink" title="@Aspect"></a>@Aspect</h5><p>表示这个类是切面类，使之成为切面对象。</p>
<h5 id="Before"><a href="#Before" class="headerlink" title="@Before()"></a>@Before()</h5><p>是指在业务代码执行之前运行的代码块，（）内添加所要切入的方法。</p>
<h5 id="After"><a href="#After" class="headerlink" title="@After()"></a>@After()</h5><p>是指在业务代码执行之后运行的代码块，（）内添加所要切入的方法。</p>
<h5 id="AfterReturning"><a href="#AfterReturning" class="headerlink" title="@AfterReturning"></a>@AfterReturning</h5><p>是指在业务代码执行之后返回的结果，（）内添加所要切入的方法以及接收到的结果。</p>
<h5 id="AfterThrowing"><a href="#AfterThrowing" class="headerlink" title="@AfterThrowing"></a>@AfterThrowing</h5><p>是指在业务代码执行之后产生的异常，（）内添加所要切入的方法以及接收到的异常。</p>
<h5 id="AfterThrowing-1"><a href="#AfterThrowing-1" class="headerlink" title="@AfterThrowing"></a>@AfterThrowing</h5><h5 id="“execution-public-int-com-woongcha-utils-impl-CalImpl-”"><a href="#“execution-public-int-com-woongcha-utils-impl-CalImpl-”" class="headerlink" title="“execution(public int com.woongcha.utils.impl.CalImpl.*(..))”"></a>“execution(public int com.woongcha.utils.impl.CalImpl.*(..))”</h5><p>通过execution表达式找到具体的方法</p>
<p>*表示在这个包下的所有方法 </p>
<p>*(..)  ..表示传入的参数</p>
<h5 id="JoinPoint-joinPoint"><a href="#JoinPoint-joinPoint" class="headerlink" title="JoinPoint joinPoint"></a>JoinPoint joinPoint</h5><p>通过连接点传入业务方法的相关信息。</p>
<h5 id="String-name-joinPoint-getSignature-getName"><a href="#String-name-joinPoint-getSignature-getName" class="headerlink" title="String name=joinPoint.getSignature().getName();"></a>String name=joinPoint.getSignature().getName();</h5><p>getSignature()..getName()获取业务方法的方法名。</p>
<h5 id="String-args-Arrays-toString-joinPoint-getArgs"><a href="#String-args-Arrays-toString-joinPoint-getArgs" class="headerlink" title="String args= Arrays.toString(joinPoint.getArgs());"></a>String args= Arrays.toString(joinPoint.getArgs());</h5><p> joinPoint.getArgs()拿到是Object类型的数组，转成String类型。</p>
<p>CalImpl也需添加@Component注解，也由IoC容器管理。</p>
<h3 id="spring-xml中配置AOP"><a href="#spring-xml中配置AOP" class="headerlink" title="spring.xml中配置AOP"></a>spring.xml中配置AOP</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xmlns:p&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot; xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans-3.2.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context-4.3.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context:component-scan base-package&#x3D;&quot;com.woongcha&quot;&gt;&lt;&#x2F;context:component-scan&gt;</span><br><span class="line">    &lt;aop:aspectj-autoproxy&gt;&lt;&#x2F;aop:aspectj-autoproxy&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>

<h5 id="context-component-scan"><a href="#context-component-scan" class="headerlink" title="context:component-scan"></a>context:component-scan</h5><p>扫描com.woongcha包下的所有@Component注解，有@Component注解的自动添加到IoC容器中。</p>
<h5 id="aop-aspectj-autoproxy"><a href="#aop-aspectj-autoproxy" class="headerlink" title="aop:aspectj-autoproxy"></a>aop:aspectj-autoproxy</h5><p>使@ASpect注解生效，让目标类和切面类结合自动生成动态代理对象。</p>
<h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ul>
<li>切面：横切关注点被模块化的抽象对象。</li>
<li>通知：切面对象完成的工作。</li>
<li>目标：被通知的对象，即被横切的对象。</li>
<li>代理：切面、通知、目标混合之后的对象。</li>
<li>连接点：通知要插入业务代码的具体位置。</li>
<li>切点：AOP 通过切点定位到连接点。</li>
</ul>
<h5 id=""><a href="#" class="headerlink" title=""></a></h5>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>面试四大问题</title>
    <url>/2020/05/14/%E9%9D%A2%E8%AF%95%E5%9B%9B%E5%A4%A7%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="面试四大问题"><a href="#面试四大问题" class="headerlink" title="面试四大问题"></a>面试四大问题</h1><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用stream流</span></span><br><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">45</span>,<span class="number">76</span>,<span class="number">34</span>,<span class="number">89</span>);        list.stream()</span><br><span class="line">                .sorted((e1,e2)-&gt;&#123;</span><br><span class="line">                    <span class="keyword">if</span> (e1==e2)&#123;</span><br><span class="line">                        <span class="keyword">return</span> e1.compareTo(e2);</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> e1.compareTo(e2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">maopao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span>[] queue= &#123;<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">74</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">79</span>,<span class="number">31</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;queue.length -<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; queue.length-<span class="number">1</span>-i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(queue[j+<span class="number">1</span>]&lt;queue[j])&#123;</span><br><span class="line">                    <span class="keyword">int</span> temp=queue[j+<span class="number">1</span>];</span><br><span class="line">                    queue[j+<span class="number">1</span>]=queue[j];</span><br><span class="line">                    queue[j]=temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.stream(queue)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="生产者消费者"><a href="#生产者消费者" class="headerlink" title="生产者消费者"></a>生产者消费者</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPCFinal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        KFC kfc = <span class="keyword">new</span> KFC();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                kfc.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">                kfc.buy();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KFC</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> chicken = <span class="number">10</span>;</span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (chicken != <span class="number">0</span>) &#123;</span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            chicken++;</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (chicken == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;鸡卖完了，正在做&quot;</span>);</span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">                chicken--;</span><br><span class="line">                System.out.println(<span class="string">&quot;已卖出库存中的第&quot;</span> + (chicken + <span class="number">1</span>) + <span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">                condition.signalAll();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>产生死锁的必要条件：</p>
<ol>
<li>互斥条件：进程要求对所分配的资源进行排它性控制，即在一段时间内某资源仅为一进程所占用。</li>
<li>请求和保持条件：当进程因请求资源而阻塞时，对已获得的资源保持不放。</li>
<li>不剥夺条件：进程已获得的资源在未使用完之前，不能剥夺，只能在使用完时由自己释放。</li>
<li>环路等待条件：在发生死锁时，必然存在一个进程–资源的环形链。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woongcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDeadLock</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> x;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestDeadLock</span><span class="params">(<span class="keyword">boolean</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (x)&#123;</span><br><span class="line">          <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">              <span class="keyword">synchronized</span> (method.f1)&#123;</span><br><span class="line">                  System.out.println(Thread.currentThread().getName()+<span class="string">&quot;拿到f1了&quot;</span>);</span><br><span class="line">                  <span class="keyword">synchronized</span> (method.f2)&#123;</span><br><span class="line"></span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">              <span class="keyword">synchronized</span> (method.f2)&#123;</span><br><span class="line">                  System.out.println(Thread.currentThread().getName()+<span class="string">&quot;拿到f2了&quot;</span>);</span><br><span class="line">                  <span class="keyword">synchronized</span> (method.f1)&#123;</span><br><span class="line"></span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestDeadLock testDeadLock = <span class="keyword">new</span> TestDeadLock(<span class="keyword">true</span>);</span><br><span class="line">        TestDeadLock testDeadLock2 = <span class="keyword">new</span> TestDeadLock(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(testDeadLock,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(testDeadLock2,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">method</span></span>&#123;</span><br><span class="line">        <span class="keyword">static</span> Object f1 =<span class="keyword">new</span> Object();</span><br><span class="line">        <span class="keyword">static</span> Object f2 =<span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程常用API解析</title>
    <url>/2020/04/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B8%B8%E7%94%A8API%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="多线程常用API解析"><a href="#多线程常用API解析" class="headerlink" title="多线程常用API解析"></a>多线程常用API解析</h1><blockquote>
<p>CountDownLunch、CyclicBarrier、Semaphore</p>
</blockquote>
<h2 id="CountDownLunch"><a href="#CountDownLunch" class="headerlink" title="CountDownLunch"></a>CountDownLunch</h2><p>字面意思：count 计数，Down 向下， Lunch 午餐？ 我认为是Launch 发射的简写吧。</p>
<p>直接理解：给CountDownLunch一个数（count），每执行一个线程就向下减1，直到减为0时，执行CountDownLunch后面的内容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> finalI = i;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">        System.out.println(finalI +<span class="string">&quot;号线程已启动&quot;</span>);</span><br><span class="line">    &#125;,String.valueOf(i)).start();</span><br><span class="line">&#125;</span><br><span class="line">countDownLatch.await();</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;5条线程执行完毕&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<blockquote>
<p> 0号线程已启动<br>1号线程已启动<br>2号线程已启动<br>3号线程已启动<br>4号线程已启动<br>5条线程执行完毕</p>
</blockquote>
<h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2><p>CyclicBarrier与CountDownLunch相反，后者做减法，前者做加法。</p>
<p>当线程数达到指定数值时，执行CyclicBarrier中的内容，CyclicBarrier提供了Runnable接口用于填写要输出的内容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">3</span>, () -&gt; &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;已经运行了三个线程&quot;</span>);</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">               System.out.println(Thread.currentThread().getName());</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   cyclicBarrier.await();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (BrokenBarrierException e)  &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;, String.valueOf(i)).start();</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<blockquote>
<p>0<br>1<br>2<br>已经运行了三个线程</p>
</blockquote>
<h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p>字面意思：信号量</p>
<p>直接理解：Semaphore控制当前正在运行的线程数，当Semaphore为1时，和Synchorize和ReentrantLock相同，且Semaphore也可以设置为公平或者非公平。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> finalI = i;</span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            semaphore.acquire();</span><br><span class="line">            System.out.println(finalI +<span class="string">&quot;号线程进入Semaphore&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            semaphore.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,String.valueOf(i)).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>三种方法用于控制不同需求下的线程数量，保证程序的稳定运行。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
</search>
